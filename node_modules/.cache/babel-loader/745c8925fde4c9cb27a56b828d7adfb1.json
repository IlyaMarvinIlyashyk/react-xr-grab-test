{"ast":null,"code":"var _jsxFileName = \"/Users/ilyamarvin/Desktop/VR/grab-test/src/components/Box/Box.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { MeshProps } from \"@react-three/fiber\";\nimport { Interactive, RayGrab } from \"@react-three/xr\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Box = props => {\n  _s();\n\n  const [isHovered, setIsHovered] = useState(false);\n  const mesh = useRef < MeshProps > null;\n  const xrSession = useRef < any > null;\n\n  const requestVr = () => {\n    var _navigator;\n\n    console.log(\"request vr\");\n\n    if ((_navigator = navigator) !== null && _navigator !== void 0 && _navigator.xr) {\n      navigator.xr.isSessionSupported(\"immersive-vr\").then(isSupported => {\n        if (isSupported) {\n          if (!xrSession.current) {\n            const sessionInit = {\n              optionalFeatures: [\"local-floor\", \"bounded-floor\", \"hand-tracking\"]\n            };\n            navigator.xr.requestSession(\"immersive-vr\", sessionInit).then(session => {\n              console.log(\"success\", session);\n              xrSession.current = session;\n            }).catch(error => {\n              console.log(error);\n            });\n          } else {\n            xrSession.current.end().then(() => xrSession.current = null);\n          }\n        } else {\n          console.log(\"WebXR doesn't support immersive-vr mode!\");\n        }\n      });\n    } else {\n      console.log(\"WebXR is not available!\");\n    }\n  };\n\n  useEffect(() => {\n    if (mesh.current) {\n      mesh.current.lookAt(0, 0, 0);\n    }\n  }, [mesh]);\n  return /*#__PURE__*/_jsxDEV(RayGrab, {\n    children: /*#__PURE__*/_jsxDEV(Interactive, {\n      onHover: () => setIsHovered(true),\n      onBlur: () => setIsHovered(false),\n      children: /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n        ref: mesh,\n        onPointerDown: requestVr,\n        onPointerOver: () => setIsHovered(true),\n        onPointerOut: () => setIsHovered(false),\n        children: [/*#__PURE__*/_jsxDEV(\"boxGeometry\", {\n          args: [1, 1, 1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n          color: isHovered ? \"#ffdb57\" : \"#6a1b9a\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Box, \"kc8+hhKG3+iGUxqsVUryptgPYnY=\");\n\n_c = Box;\nexport default Box;\n\nvar _c;\n\n$RefreshReg$(_c, \"Box\");","map":{"version":3,"names":["React","useEffect","useRef","useState","MeshProps","Interactive","RayGrab","Box","props","isHovered","setIsHovered","mesh","xrSession","any","requestVr","console","log","navigator","xr","isSessionSupported","then","isSupported","current","sessionInit","optionalFeatures","requestSession","session","catch","error","end","lookAt"],"sources":["/Users/ilyamarvin/Desktop/VR/grab-test/src/components/Box/Box.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { MeshProps } from \"@react-three/fiber\";\nimport { Interactive, RayGrab } from \"@react-three/xr\";\n\nconst Box = (props: any) => {\n  const [isHovered, setIsHovered] = useState(false);\n\n  const mesh = useRef < MeshProps > null;\n  const xrSession = useRef < any > null;\n\n  const requestVr = () => {\n    console.log(\"request vr\");\n\n    if (navigator?.xr) {\n      navigator.xr\n        .isSessionSupported(\"immersive-vr\")\n        .then((isSupported: boolean) => {\n          if (isSupported) {\n            if (!xrSession.current) {\n              const sessionInit = {\n                optionalFeatures: [\n                  \"local-floor\",\n                  \"bounded-floor\",\n                  \"hand-tracking\",\n                ],\n              };\n\n              navigator.xr\n                .requestSession(\"immersive-vr\", sessionInit)\n                .then((session: any) => {\n                  console.log(\"success\", session);\n\n                  xrSession.current = session;\n                })\n                .catch((error: any) => {\n                  console.log(error);\n                });\n            } else {\n              xrSession.current.end().then(() => (xrSession.current = null));\n            }\n          } else {\n            console.log(\"WebXR doesn't support immersive-vr mode!\");\n          }\n        });\n    } else {\n      console.log(\"WebXR is not available!\");\n    }\n  };\n\n  useEffect(() => {\n    if (mesh.current) {\n      mesh.current.lookAt(0, 0, 0);\n    }\n  }, [mesh]);\n\n  return (\n    <RayGrab>\n      <Interactive\n        onHover={() => setIsHovered(true)}\n        onBlur={() => setIsHovered(false)}\n      >\n        <mesh\n          {...props}\n          ref={mesh}\n          onPointerDown={requestVr}\n          onPointerOver={() => setIsHovered(true)}\n          onPointerOut={() => setIsHovered(false)}\n        >\n          <boxGeometry args={[1, 1, 1]} />\n          <meshStandardMaterial color={isHovered ? \"#ffdb57\" : \"#6a1b9a\"} />\n        </mesh>\n      </Interactive>\n    </RayGrab>\n  );\n};\n\nexport default Box;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,iBAArC;;;AAEA,MAAMC,GAAG,GAAIC,KAAD,IAAgB;EAAA;;EAC1B,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,KAAD,CAA1C;EAEA,MAAMQ,IAAI,GAAGT,MAAM,GAAGE,SAAT,GAAqB,IAAlC;EACA,MAAMQ,SAAS,GAAGV,MAAM,GAAGW,GAAT,GAAe,IAAjC;;EAEA,MAAMC,SAAS,GAAG,MAAM;IAAA;;IACtBC,OAAO,CAACC,GAAR,CAAY,YAAZ;;IAEA,kBAAIC,SAAJ,uCAAI,WAAWC,EAAf,EAAmB;MACjBD,SAAS,CAACC,EAAV,CACGC,kBADH,CACsB,cADtB,EAEGC,IAFH,CAESC,WAAD,IAA0B;QAC9B,IAAIA,WAAJ,EAAiB;UACf,IAAI,CAACT,SAAS,CAACU,OAAf,EAAwB;YACtB,MAAMC,WAAW,GAAG;cAClBC,gBAAgB,EAAE,CAChB,aADgB,EAEhB,eAFgB,EAGhB,eAHgB;YADA,CAApB;YAQAP,SAAS,CAACC,EAAV,CACGO,cADH,CACkB,cADlB,EACkCF,WADlC,EAEGH,IAFH,CAESM,OAAD,IAAkB;cACtBX,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBU,OAAvB;cAEAd,SAAS,CAACU,OAAV,GAAoBI,OAApB;YACD,CANH,EAOGC,KAPH,CAOUC,KAAD,IAAgB;cACrBb,OAAO,CAACC,GAAR,CAAYY,KAAZ;YACD,CATH;UAUD,CAnBD,MAmBO;YACLhB,SAAS,CAACU,OAAV,CAAkBO,GAAlB,GAAwBT,IAAxB,CAA6B,MAAOR,SAAS,CAACU,OAAV,GAAoB,IAAxD;UACD;QACF,CAvBD,MAuBO;UACLP,OAAO,CAACC,GAAR,CAAY,0CAAZ;QACD;MACF,CA7BH;IA8BD,CA/BD,MA+BO;MACLD,OAAO,CAACC,GAAR,CAAY,yBAAZ;IACD;EACF,CArCD;;EAuCAf,SAAS,CAAC,MAAM;IACd,IAAIU,IAAI,CAACW,OAAT,EAAkB;MAChBX,IAAI,CAACW,OAAL,CAAaQ,MAAb,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B;IACD;EACF,CAJQ,EAIN,CAACnB,IAAD,CAJM,CAAT;EAMA,oBACE,QAAC,OAAD;IAAA,uBACE,QAAC,WAAD;MACE,OAAO,EAAE,MAAMD,YAAY,CAAC,IAAD,CAD7B;MAEE,MAAM,EAAE,MAAMA,YAAY,CAAC,KAAD,CAF5B;MAAA,uBAIE,qBACMF,KADN;QAEE,GAAG,EAAEG,IAFP;QAGE,aAAa,EAAEG,SAHjB;QAIE,aAAa,EAAE,MAAMJ,YAAY,CAAC,IAAD,CAJnC;QAKE,YAAY,EAAE,MAAMA,YAAY,CAAC,KAAD,CALlC;QAAA,wBAOE;UAAa,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;QAAnB;UAAA;UAAA;UAAA;QAAA,QAPF,eAQE;UAAsB,KAAK,EAAED,SAAS,GAAG,SAAH,GAAe;QAArD;UAAA;UAAA;UAAA;QAAA,QARF;MAAA;QAAA;QAAA;QAAA;MAAA;IAJF;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAmBD,CAtED;;GAAMF,G;;KAAAA,G;AAwEN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}
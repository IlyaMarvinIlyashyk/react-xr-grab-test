{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport React__default, { useMemo, useContext, useRef, useEffect, forwardRef } from 'react';\nimport { useThree, useFrame, Canvas } from '@react-three/fiber';\nimport { Matrix4, Group, Object3D, SphereGeometry, MeshBasicMaterial, Mesh, Color, BoxBufferGeometry, Sphere, Box3 } from 'three';\nimport mergeRefs from 'react-merge-refs';\nimport { GLTFLoader } from 'three-stdlib';\n\nclass ARButton {\n  static createButton(renderer) {\n    let sessionInit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const button = document.createElement('button');\n\n    function\n    /*device*/\n    showStartAR() {\n      if (sessionInit.domOverlay === undefined) {\n        const overlay = document.createElement('div');\n        overlay.style.display = 'none';\n        document.body.appendChild(overlay);\n        const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        svg.setAttribute('width', 38);\n        svg.setAttribute('height', 38);\n        svg.style.position = 'absolute';\n        svg.style.right = '20px';\n        svg.style.top = '20px';\n        svg.addEventListener('click', function () {\n          currentSession.end();\n        });\n        overlay.appendChild(svg);\n        const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        path.setAttribute('d', 'M 12,12 L 28,28 M 28,12 12,28');\n        path.setAttribute('stroke', '#fff');\n        path.setAttribute('stroke-width', 2);\n        svg.appendChild(path);\n\n        if (sessionInit.optionalFeatures === undefined) {\n          sessionInit.optionalFeatures = [];\n        }\n\n        sessionInit.optionalFeatures.push('dom-overlay');\n        sessionInit.domOverlay = {\n          root: overlay\n        };\n      } //\n\n\n      let currentSession = null;\n\n      async function onSessionStarted(session) {\n        session.addEventListener('end', onSessionEnded);\n        renderer.xr.setReferenceSpaceType('local');\n        await renderer.xr.setSession(session);\n        button.textContent = 'STOP AR';\n        sessionInit.domOverlay.root.style.display = '';\n        currentSession = session;\n      }\n\n      function\n      /*event*/\n      onSessionEnded() {\n        currentSession.removeEventListener('end', onSessionEnded);\n        button.textContent = 'START AR';\n        sessionInit.domOverlay.root.style.display = 'none';\n        currentSession = null;\n      } //\n\n\n      button.style.display = '';\n      button.style.cursor = 'pointer';\n      button.style.left = 'calc(50% - 50px)';\n      button.style.width = '100px';\n      button.textContent = 'START AR';\n\n      button.onmouseenter = function () {\n        button.style.opacity = '1.0';\n      };\n\n      button.onmouseleave = function () {\n        button.style.opacity = '0.5';\n      };\n\n      button.onclick = function () {\n        if (currentSession === null) {\n          navigator.xr.requestSession('immersive-ar', sessionInit).then(onSessionStarted);\n        } else {\n          currentSession.end();\n        }\n      };\n    }\n\n    function disableButton() {\n      button.style.display = '';\n      button.style.cursor = 'auto';\n      button.style.left = 'calc(50% - 75px)';\n      button.style.width = '150px';\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n      button.onclick = null;\n    }\n\n    function showARNotSupported() {\n      disableButton();\n      button.textContent = 'AR NOT SUPPORTED';\n    }\n\n    function stylizeElement(element) {\n      element.style.position = 'absolute';\n      element.style.bottom = '20px';\n      element.style.padding = '12px 6px';\n      element.style.border = '1px solid #fff';\n      element.style.borderRadius = '4px';\n      element.style.background = 'rgba(0,0,0,0.1)';\n      element.style.color = '#fff';\n      element.style.font = 'normal 13px sans-serif';\n      element.style.textAlign = 'center';\n      element.style.opacity = '0.5';\n      element.style.outline = 'none';\n      element.style.zIndex = '999';\n    }\n\n    if ('xr' in navigator) {\n      button.id = 'ARButton';\n      button.style.display = 'none';\n      stylizeElement(button);\n      navigator.xr.isSessionSupported('immersive-ar').then(function (supported) {\n        supported ? showStartAR() : showARNotSupported();\n      }).catch(showARNotSupported);\n      return button;\n    } else {\n      const message = document.createElement('a');\n\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:');\n        message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/';\n        message.innerHTML = 'WEBXR NOT AVAILABLE';\n      }\n\n      message.style.left = 'calc(50% - 90px)';\n      message.style.width = '180px';\n      message.style.textDecoration = 'none';\n      stylizeElement(message);\n      return message;\n    }\n  }\n\n}\n\nclass VRButton {\n  static createButton(renderer) {\n    let sessionInit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const button = document.createElement('button');\n\n    function\n    /*device*/\n    showEnterVR() {\n      let currentSession = null;\n\n      async function onSessionStarted(session) {\n        session.addEventListener('end', onSessionEnded);\n        await renderer.xr.setSession(session);\n        button.textContent = 'EXIT VR';\n        currentSession = session;\n      }\n\n      function\n      /*event*/\n      onSessionEnded() {\n        currentSession.removeEventListener('end', onSessionEnded);\n        button.textContent = 'ENTER VR';\n        currentSession = null;\n      } //\n\n\n      button.style.display = '';\n      button.style.cursor = 'pointer';\n      button.style.left = 'calc(50% - 50px)';\n      button.style.width = '100px';\n      button.textContent = 'ENTER VR';\n\n      button.onmouseenter = function () {\n        button.style.opacity = '1.0';\n      };\n\n      button.onmouseleave = function () {\n        button.style.opacity = '0.5';\n      };\n\n      button.onclick = function () {\n        if (currentSession === null) {\n          // WebXR's requestReferenceSpace only works if the corresponding feature\n          // was requested at session creation time. For simplicity, just ask for\n          // the interesting ones as optional features, but be aware that the\n          // requestReferenceSpace call will fail if it turns out to be unavailable.\n          // ('local' is always available for immersive sessions and doesn't need to\n          // be requested separately.)\n          const optionalFeatures = [sessionInit.optionalFeatures, 'local-floor', 'bounded-floor', 'hand-tracking'].flat().filter(Boolean);\n          navigator.xr.requestSession('immersive-vr', { ...sessionInit,\n            optionalFeatures\n          }).then(onSessionStarted);\n        } else {\n          currentSession.end();\n        }\n      };\n    }\n\n    function disableButton() {\n      button.style.display = '';\n      button.style.cursor = 'auto';\n      button.style.left = 'calc(50% - 75px)';\n      button.style.width = '150px';\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n      button.onclick = null;\n    }\n\n    function showWebXRNotFound() {\n      disableButton();\n      button.textContent = 'VR NOT SUPPORTED';\n    }\n\n    function stylizeElement(element) {\n      element.style.position = 'absolute';\n      element.style.bottom = '20px';\n      element.style.padding = '12px 6px';\n      element.style.border = '1px solid #fff';\n      element.style.borderRadius = '4px';\n      element.style.background = 'rgba(0,0,0,0.1)';\n      element.style.color = '#fff';\n      element.style.font = 'normal 13px sans-serif';\n      element.style.textAlign = 'center';\n      element.style.opacity = '0.5';\n      element.style.outline = 'none';\n      element.style.zIndex = '999';\n    }\n\n    if ('xr' in navigator) {\n      button.id = 'VRButton';\n      button.style.display = 'none';\n      stylizeElement(button);\n      navigator.xr.isSessionSupported('immersive-vr').then(function (supported) {\n        supported ? showEnterVR() : showWebXRNotFound();\n      });\n      return button;\n    } else {\n      const message = document.createElement('a');\n\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:');\n        message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/';\n        message.innerHTML = 'WEBXR NOT AVAILABLE';\n      }\n\n      message.style.left = 'calc(50% - 90px)';\n      message.style.width = '180px';\n      message.style.textDecoration = 'none';\n      stylizeElement(message);\n      return message;\n    }\n  }\n\n}\n\nconst XRController = {\n  make: (id, gl, onConnected, onDisconnected) => {\n    const controller = gl.xr.getController(id);\n    const grip = gl.xr.getControllerGrip(id);\n    const hand = gl.xr.getHand(id);\n    const xrController = {\n      inputSource: undefined,\n      grip,\n      controller,\n      hand\n    };\n    grip.userData.name = 'grip';\n    controller.userData.name = 'controller';\n    hand.userData.name = 'hand';\n    controller.addEventListener('connected', event => {\n      if (event.fake) {\n        return;\n      }\n\n      xrController.inputSource = event.data;\n      onConnected(xrController);\n    });\n    controller.addEventListener('disconnected', _ => {\n      onDisconnected(xrController);\n    });\n  }\n};\n/**\n * Store data associated with some objects in the scene\n *\n * For example storing event handlers:\n *\n * objectA:\n *   onClick: [handler, handler]\n * objectB:\n *   onHover: [handler]\n *   onBlur:  [handler]\n *\n */\n\nconst ObjectsState = {\n  make: function () {\n    return new Map();\n  },\n  add: function (state, object, key, value) {\n    if (!state.has(object)) {\n      state.set(object, {\n        key: [value]\n      });\n    }\n\n    const entry = state.get(object);\n\n    if (!entry[key]) {\n      entry[key] = [];\n    }\n\n    entry[key].push(value);\n  },\n  delete: function (state, object, key, value) {\n    const entry = state.get(object);\n    if (!entry || !entry[key]) return;\n    entry[key] = entry[key].filter(it => it !== value);\n\n    if (entry[key].length === 0) {\n      delete entry[key];\n    } // Remove entry if nothing left\n\n\n    if (Object.keys(entry).length === 0) {\n      state.delete(object);\n    }\n  },\n  has: function (state, object, key) {\n    const entry = state.get(object);\n    return !!(entry && entry[key]);\n  },\n  get: function (state, object, key) {\n    const entry = state.get(object);\n    return entry && entry[key];\n  }\n};\n\nconst useXREvent = function (event, handler) {\n  let {\n    handedness\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const handlerRef = React__default.useRef(handler);\n  React__default.useEffect(() => {\n    handlerRef.current = handler;\n  }, [handler]);\n  const {\n    controllers: allControllers\n  } = useXR();\n  React__default.useEffect(() => {\n    const controllers = handedness ? allControllers.filter(it => it.inputSource.handedness === handedness) : allControllers;\n    const cleanups = [];\n    controllers.forEach(it => {\n      const listener = e => handlerRef.current({\n        originalEvent: e,\n        controller: it\n      });\n\n      it.controller.addEventListener(event, listener);\n      cleanups.push(() => it.controller.removeEventListener(event, listener));\n    });\n    return () => cleanups.forEach(fn => fn());\n  }, [event, allControllers, handedness]);\n};\n\nconst warnAboutVRARCanvas = () => console.warn('You must provide a ARCanvas or VRCanvas as a wrapper to use interactions');\n\nconst InteractionsContext = /*#__PURE__*/React__default.createContext({\n  hoverState: {},\n  addInteraction: warnAboutVRARCanvas,\n  removeInteraction: warnAboutVRARCanvas\n});\n\nfunction InteractionManager(_ref) {\n  let {\n    children\n  } = _ref;\n  const state = useThree();\n  const {\n    controllers\n  } = useXR();\n  const [hoverState] = React__default.useState(() => ({\n    left: new Map(),\n    right: new Map(),\n    none: new Map()\n  }));\n  const [interactions] = React__default.useState(() => ObjectsState.make());\n  const addInteraction = React__default.useCallback((object, eventType, handler) => {\n    ObjectsState.add(interactions, object, eventType, handler);\n  }, [interactions]);\n  const removeInteraction = React__default.useCallback((object, eventType, handler) => {\n    ObjectsState.delete(interactions, object, eventType, handler);\n  }, [interactions]);\n  const intersect = React__default.useCallback(controller => {\n    const objects = Array.from(interactions.keys());\n    const tempMatrix = new Matrix4();\n    tempMatrix.identity().extractRotation(controller.matrixWorld);\n    state.raycaster.ray.origin.setFromMatrixPosition(controller.matrixWorld);\n    state.raycaster.ray.direction.set(0, 0, -1).applyMatrix4(tempMatrix);\n    return state.raycaster.intersectObjects(objects, true);\n  }, [interactions, state.raycaster]); // Trigger hover and blur events\n\n  useFrame(() => {\n    if (interactions.size === 0) {\n      return;\n    }\n\n    controllers.forEach(it => {\n      const {\n        controller\n      } = it;\n      const handedness = it.inputSource.handedness;\n      const hovering = hoverState[handedness];\n      const hits = new Set();\n      let intersections = intersect(controller);\n\n      if (state.raycaster.filter) {\n        // https://github.com/mrdoob/three.js/issues/16031\n        // Allow custom userland intersect sort order\n        intersections = state.raycaster.filter(intersections, state);\n      } else {\n        // Otherwise, filter to first hit\n        const hit = intersections.find(i => i == null ? void 0 : i.object);\n        if (hit) intersections = [hit];\n      }\n\n      intersections.forEach(intersection => {\n        let eventObject = intersection.object;\n\n        while (eventObject) {\n          if (ObjectsState.has(interactions, eventObject, 'onHover') && !hovering.has(eventObject)) {\n            var _ObjectsState$get;\n\n            (_ObjectsState$get = ObjectsState.get(interactions, eventObject, 'onHover')) == null ? void 0 : _ObjectsState$get.forEach(handler => handler({\n              controller: it,\n              intersection\n            }));\n          }\n\n          hovering.set(eventObject, intersection);\n          hits.add(eventObject.id);\n          eventObject = eventObject.parent;\n        }\n      }); // Trigger blur on all the object that were hovered in the previous frame\n      // but missed in this one\n\n      for (const eventObject of hovering.keys()) {\n        if (!hits.has(eventObject.id)) {\n          var _ObjectsState$get2;\n\n          (_ObjectsState$get2 = ObjectsState.get(interactions, eventObject, 'onBlur')) == null ? void 0 : _ObjectsState$get2.forEach(handler => handler({\n            controller: it\n          }));\n          hovering.delete(eventObject);\n        }\n      }\n    });\n  });\n\n  const triggerEvent = interaction => e => {\n    const hovering = hoverState[e.controller.inputSource.handedness];\n\n    for (const hovered of hovering.keys()) {\n      var _ObjectsState$get3;\n\n      (_ObjectsState$get3 = ObjectsState.get(interactions, hovered, interaction)) == null ? void 0 : _ObjectsState$get3.forEach(handler => handler({\n        controller: e.controller,\n        intersection: hovering.get(hovered)\n      }));\n    }\n  };\n\n  useXREvent('select', triggerEvent('onSelect'));\n  useXREvent('selectstart', triggerEvent('onSelectStart'));\n  useXREvent('selectend', triggerEvent('onSelectEnd'));\n  useXREvent('squeeze', triggerEvent('onSqueeze'));\n  useXREvent('squeezeend', triggerEvent('onSqueezeEnd'));\n  useXREvent('squeezestart', triggerEvent('onSqueezeStart'));\n  const contextValue = useMemo(() => ({\n    addInteraction,\n    removeInteraction,\n    hoverState\n  }), [addInteraction, removeInteraction, hoverState]);\n  return /*#__PURE__*/React__default.createElement(InteractionsContext.Provider, {\n    value: contextValue\n  }, children);\n}\n\nconst useInteraction = (ref, type, handler) => {\n  const {\n    addInteraction,\n    removeInteraction\n  } = useContext(InteractionsContext);\n  const isPresent = handler !== undefined;\n  const handlerRef = useRef(handler);\n  useEffect(() => {\n    handlerRef.current = handler;\n  }, [handler]);\n  useEffect(() => {\n    if (!isPresent) return;\n\n    const handlerFn = e => {\n      handlerRef.current == null ? void 0 : handlerRef.current(e);\n    };\n\n    addInteraction(ref.current, type, handlerFn);\n    const maybeRef = ref.current;\n    return () => removeInteraction(maybeRef, type, handlerFn);\n  }, [type, addInteraction, removeInteraction, isPresent, ref]);\n};\n\nconst Interactive = /*#__PURE__*/forwardRef((props, passedRef) => {\n  const ref = useRef();\n  useInteraction(ref, 'onHover', props.onHover);\n  useInteraction(ref, 'onBlur', props.onBlur);\n  useInteraction(ref, 'onSelectStart', props.onSelectStart);\n  useInteraction(ref, 'onSelectEnd', props.onSelectEnd);\n  useInteraction(ref, 'onSelect', props.onSelect);\n  useInteraction(ref, 'onSqueezeStart', props.onSqueezeStart);\n  useInteraction(ref, 'onSqueezeEnd', props.onSqueezeEnd);\n  useInteraction(ref, 'onSqueeze', props.onSqueeze);\n  return /*#__PURE__*/React__default.createElement(\"group\", {\n    ref: mergeRefs([passedRef, ref])\n  }, props.children);\n});\n\nfunction RayGrab(_ref2) {\n  let {\n    children\n  } = _ref2;\n  const grabbingController = useRef();\n  const groupRef = useRef();\n  const previousTransform = useRef(undefined);\n  useXREvent('selectend', e => {\n    if (e.controller.controller === grabbingController.current) {\n      grabbingController.current = undefined;\n      previousTransform.current = undefined;\n    }\n  });\n  useFrame(() => {\n    if (!grabbingController.current || !previousTransform.current || !groupRef.current) {\n      return;\n    }\n\n    const controller = grabbingController.current;\n    const group = groupRef.current;\n    group.applyMatrix4(previousTransform.current);\n    group.applyMatrix4(controller.matrixWorld);\n    group.updateWorldMatrix(false, true);\n    previousTransform.current = controller.matrixWorld.clone().invert();\n  });\n  return /*#__PURE__*/React__default.createElement(Interactive, {\n    ref: groupRef,\n    onSelectStart: e => {\n      grabbingController.current = e.controller.controller;\n      previousTransform.current = e.controller.controller.matrixWorld.clone().invert();\n    }\n  }, children);\n}\n\nconst XRContext = /*#__PURE__*/React.createContext({});\n\nconst useControllers = group => {\n  const {\n    gl\n  } = useThree();\n  const [controllers, setControllers] = React.useState([]);\n  React.useEffect(() => {\n    const ids = [0, 1];\n    ids.forEach(id => {\n      XRController.make(id, gl, controller => {\n        group.add(controller.controller);\n        group.add(controller.grip);\n        group.add(controller.hand);\n        setControllers(it => [...it, controller]);\n      }, controller => {\n        group.remove(controller.controller);\n        group.remove(controller.grip);\n        group.remove(controller.hand);\n        setControllers(existing => existing.filter(it => it !== controller));\n      });\n    });\n  }, [gl, group]);\n  return controllers;\n};\n\nfunction useHitTest(hitTestCallback) {\n  const {\n    gl\n  } = useThree();\n  const hitTestSource = React.useRef();\n  const hitTestSourceRequested = React.useRef(false);\n  const [hitMatrix] = React.useState(() => new Matrix4());\n  useFrame(() => {\n    if (!gl.xr.isPresenting) return;\n    const session = gl.xr.getSession();\n    if (!session) return;\n\n    if (!hitTestSourceRequested.current) {\n      session.requestReferenceSpace('viewer').then(referenceSpace => {\n        session.requestHitTestSource({\n          space: referenceSpace\n        }).then(source => {\n          hitTestSource.current = source;\n        });\n      });\n      session.addEventListener('end', () => {\n        hitTestSourceRequested.current = false;\n        hitTestSource.current = undefined;\n      }, {\n        once: true\n      });\n      hitTestSourceRequested.current = true;\n    }\n\n    if (hitTestSource.current && gl.xr.isPresenting) {\n      const referenceSpace = gl.xr.getReferenceSpace();\n\n      if (referenceSpace) {\n        // This raf is unnecesary, we should get XRFrame from r3f but it's not implemented yet\n        session.requestAnimationFrame((time, frame) => {\n          const hitTestResults = frame.getHitTestResults(hitTestSource.current);\n\n          if (hitTestResults.length) {\n            const hit = hitTestResults[0];\n            const pose = hit.getPose(referenceSpace);\n\n            if (pose) {\n              hitMatrix.fromArray(pose.transform.matrix);\n              hitTestCallback(hitMatrix, hit);\n            }\n          }\n        });\n      }\n    }\n  });\n}\n\nfunction XR(_ref3) {\n  let {\n    foveation = 0,\n    children\n  } = _ref3;\n  const {\n    gl,\n    camera\n  } = useThree();\n  const [isPresenting, setIsPresenting] = React.useState(() => gl.xr.isPresenting);\n  const [isHandTracking, setHandTracking] = React.useState(false);\n  const [player] = React.useState(() => new Group());\n  const controllers = useControllers(player);\n  React.useEffect(() => {\n    const xr = gl.xr;\n\n    const handleSessionChange = () => setIsPresenting(xr.isPresenting);\n\n    xr.addEventListener('sessionstart', handleSessionChange);\n    xr.addEventListener('sessionend', handleSessionChange);\n    return () => {\n      xr.removeEventListener('sessionstart', handleSessionChange);\n      xr.removeEventListener('sessionend', handleSessionChange);\n    };\n  }, [gl]);\n  React.useEffect(() => {\n    const xr = gl.xr;\n\n    if (xr.setFoveation) {\n      xr.setFoveation(foveation);\n    }\n  }, [gl, foveation]);\n  React.useEffect(() => {\n    var _session$inputSources;\n\n    const session = gl.xr.getSession();\n\n    const handleInputSourcesChange = event => setHandTracking(Object.values(event.session.inputSources).some(source => source.hand));\n\n    session == null ? void 0 : session.addEventListener('inputsourceschange', handleInputSourcesChange);\n    setHandTracking(Object.values((_session$inputSources = session == null ? void 0 : session.inputSources) != null ? _session$inputSources : []).some(source => source.hand));\n    return () => {\n      session == null ? void 0 : session.removeEventListener('inputsourceschange', handleInputSourcesChange);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isPresenting]);\n  const value = React.useMemo(() => ({\n    controllers,\n    isPresenting,\n    isHandTracking,\n    player\n  }), [controllers, isPresenting, isHandTracking, player]);\n  return /*#__PURE__*/React.createElement(XRContext.Provider, {\n    value: value\n  }, /*#__PURE__*/React.createElement(\"primitive\", {\n    object: player,\n    dispose: null\n  }, /*#__PURE__*/React.createElement(\"primitive\", {\n    object: camera,\n    dispose: null\n  })), children);\n}\n\nfunction XRCanvas(_ref4) {\n  let {\n    foveation,\n    children,\n    ...rest\n  } = _ref4;\n  return /*#__PURE__*/React.createElement(Canvas, _extends({\n    vr: true\n  }, rest), /*#__PURE__*/React.createElement(XR, {\n    foveation: foveation\n  }, /*#__PURE__*/React.createElement(InteractionManager, null, children)));\n}\n\nfunction useXRButton(mode, gl, sessionInit, container) {\n  const button = React.useMemo(() => {\n    const target = mode === 'AR' ? ARButton : VRButton;\n    return target.createButton(gl, sessionInit);\n  }, [mode, gl, sessionInit]);\n  React.useLayoutEffect(() => {\n    var _container$current;\n\n    const parent = (_container$current = container == null ? void 0 : container.current) != null ? _container$current : document.body;\n    parent.appendChild(button);\n    return () => void parent.removeChild(button); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [button]);\n  return button;\n}\n\nfunction XRButton(_ref5) {\n  let {\n    mode,\n    sessionInit\n  } = _ref5;\n  const gl = useThree(state => state.gl);\n  useXRButton(mode, gl, sessionInit);\n  return null;\n}\n\nfunction VRCanvas(_ref6) {\n  let {\n    children,\n    sessionInit,\n    ...rest\n  } = _ref6;\n  return /*#__PURE__*/React.createElement(XRCanvas, rest, /*#__PURE__*/React.createElement(XRButton, {\n    mode: \"VR\",\n    sessionInit: sessionInit\n  }), children);\n}\n\nfunction ARCanvas(_ref7) {\n  let {\n    children,\n    sessionInit,\n    ...rest\n  } = _ref7;\n  return /*#__PURE__*/React.createElement(XRCanvas, rest, /*#__PURE__*/React.createElement(XRButton, {\n    mode: \"AR\",\n    sessionInit: sessionInit\n  }), children);\n}\n\nconst useXR = () => {\n  const xrValue = React.useContext(XRContext);\n  const interactionsValue = React.useContext(InteractionsContext);\n  const contextValue = React.useMemo(() => ({ ...xrValue,\n    ...interactionsValue\n  }), [xrValue, interactionsValue]);\n  return contextValue;\n};\n/**\n * @deprecated R3F v8's built-in `useFrame` extends the `XRSession.requestAnimationFrame` signature:\n *\n * `useFrame((state, delta, xrFrame) => void)`\n *\n * @see https://mdn.io/XRFrame\n */\n\n\nconst useXRFrame = callback => {\n  const {\n    gl\n  } = useThree();\n  const requestRef = React.useRef();\n  const previousTimeRef = React.useRef();\n  const loop = React.useCallback((time, xrFrame) => {\n    if (previousTimeRef.current !== undefined) {\n      callback(time, xrFrame);\n    }\n\n    previousTimeRef.current = time;\n    requestRef.current = gl.xr.getSession().requestAnimationFrame(loop);\n  }, [gl.xr, callback]);\n  React.useEffect(() => {\n    const handleSessionChange = () => {\n      var _gl$xr;\n\n      if (!((_gl$xr = gl.xr) != null && _gl$xr.isPresenting)) return;\n\n      if (requestRef.current) {\n        gl.xr.getSession().cancelAnimationFrame(requestRef.current);\n      }\n\n      requestRef.current = gl.xr.getSession().requestAnimationFrame(loop);\n    };\n\n    handleSessionChange();\n    gl.xr.addEventListener('sessionstart', handleSessionChange);\n    gl.xr.addEventListener('sessionend', handleSessionChange);\n    return () => {\n      gl.xr.removeEventListener('sessionstart', handleSessionChange);\n      gl.xr.removeEventListener('sessionend', handleSessionChange);\n\n      if (requestRef.current) {\n        gl.xr.getSession().cancelAnimationFrame(requestRef.current);\n      }\n    };\n  }, [loop, gl.xr]);\n};\n\nconst useController = handedness => {\n  const {\n    controllers\n  } = useXR();\n  const controller = React.useMemo(() => controllers.find(it => it.inputSource.handedness === handedness), [handedness, controllers]);\n  return controller;\n};\n/**\n * @webxr-input-profiles/motion-controllers 1.0.0 https://github.com/immersive-web/webxr-input-profiles\n */\n\n\nconst MotionControllerConstants = {\n  Handedness: Object.freeze({\n    NONE: 'none',\n    LEFT: 'left',\n    RIGHT: 'right'\n  }),\n  ComponentState: Object.freeze({\n    DEFAULT: 'default',\n    TOUCHED: 'touched',\n    PRESSED: 'pressed'\n  }),\n  ComponentProperty: Object.freeze({\n    BUTTON: 'button',\n    X_AXIS: 'xAxis',\n    Y_AXIS: 'yAxis',\n    STATE: 'state'\n  }),\n  ComponentType: Object.freeze({\n    TRIGGER: 'trigger',\n    SQUEEZE: 'squeeze',\n    TOUCHPAD: 'touchpad',\n    THUMBSTICK: 'thumbstick',\n    BUTTON: 'button'\n  }),\n  ButtonTouchThreshold: 0.05,\n  AxisTouchThreshold: 0.1,\n  VisualResponseProperty: Object.freeze({\n    TRANSFORM: 'transform',\n    VISIBILITY: 'visibility'\n  })\n};\n/**\n * @description Static helper function to fetch a JSON file and turn it into a JS object\n * @param {string} path - Path to JSON file to be fetched\n */\n\nasync function fetchJsonFile(path) {\n  const response = await fetch(path);\n\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  } else {\n    return response.json();\n  }\n}\n\nasync function fetchProfilesList(basePath) {\n  if (!basePath) {\n    throw new Error('No basePath supplied');\n  }\n\n  const profileListFileName = 'profilesList.json';\n  const profilesList = await fetchJsonFile(`${basePath}/${profileListFileName}`);\n  return profilesList;\n}\n\nasync function fetchProfile(xrInputSource, basePath) {\n  let defaultProfile = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let getAssetPath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n  if (!xrInputSource) {\n    throw new Error('No xrInputSource supplied');\n  }\n\n  if (!basePath) {\n    throw new Error('No basePath supplied');\n  } // Get the list of profiles\n\n\n  const supportedProfilesList = await fetchProfilesList(basePath); // Find the relative path to the first requested profile that is recognized\n\n  let match;\n  xrInputSource.profiles.some(profileId => {\n    const supportedProfile = supportedProfilesList[profileId];\n\n    if (supportedProfile) {\n      match = {\n        profileId,\n        profilePath: `${basePath}/${supportedProfile.path}`,\n        deprecated: !!supportedProfile.deprecated\n      };\n    }\n\n    return !!match;\n  });\n\n  if (!match) {\n    if (!defaultProfile) {\n      throw new Error('No matching profile name found');\n    }\n\n    const supportedProfile = supportedProfilesList[defaultProfile];\n\n    if (!supportedProfile) {\n      throw new Error(`No matching profile name found and default profile \"${defaultProfile}\" missing.`);\n    }\n\n    match = {\n      profileId: defaultProfile,\n      profilePath: `${basePath}/${supportedProfile.path}`,\n      deprecated: !!supportedProfile.deprecated\n    };\n  }\n\n  const profile = await fetchJsonFile(match.profilePath);\n  let assetPath;\n\n  if (getAssetPath) {\n    let layout;\n\n    if (xrInputSource.handedness === 'any') {\n      layout = profile.layouts[Object.keys(profile.layouts)[0]];\n    } else {\n      layout = profile.layouts[xrInputSource.handedness];\n    }\n\n    if (!layout) {\n      throw new Error(`No matching handedness, ${xrInputSource.handedness}, in profile ${match.profileId}`);\n    }\n\n    if (layout.assetPath) {\n      assetPath = match.profilePath.replace('profile.json', layout.assetPath);\n    }\n  }\n\n  return {\n    profile,\n    assetPath\n  };\n}\n/** @constant {Object} */\n\n\nconst defaultComponentValues = {\n  xAxis: 0,\n  yAxis: 0,\n  button: 0,\n  state: MotionControllerConstants.ComponentState.DEFAULT\n};\n/**\n * @description Converts an X, Y coordinate from the range -1 to 1 (as reported by the Gamepad\n * API) to the range 0 to 1 (for interpolation). Also caps the X, Y values to be bounded within\n * a circle. This ensures that thumbsticks are not animated outside the bounds of their physical\n * range of motion and touchpads do not report touch locations off their physical bounds.\n * @param {number} x The original x coordinate in the range -1 to 1\n * @param {number} y The original y coordinate in the range -1 to 1\n */\n\nfunction normalizeAxes() {\n  let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let xAxis = x;\n  let yAxis = y; // Determine if the point is outside the bounds of the circle\n  // and, if so, place it on the edge of the circle\n\n  const hypotenuse = Math.sqrt(x * x + y * y);\n\n  if (hypotenuse > 1) {\n    const theta = Math.atan2(y, x);\n    xAxis = Math.cos(theta);\n    yAxis = Math.sin(theta);\n  } // Scale and move the circle so values are in the interpolation range.  The circle's origin moves\n  // from (0, 0) to (0.5, 0.5). The circle's radius scales from 1 to be 0.5.\n\n\n  const result = {\n    normalizedXAxis: xAxis * 0.5 + 0.5,\n    normalizedYAxis: yAxis * 0.5 + 0.5\n  };\n  return result;\n}\n/**\n * Contains the description of how the 3D model should visually respond to a specific user input.\n * This is accomplished by initializing the object with the name of a node in the 3D model and\n * property that need to be modified in response to user input, the name of the nodes representing\n * the allowable range of motion, and the name of the input which triggers the change. In response\n * to the named input changing, this object computes the appropriate weighting to use for\n * interpolating between the range of motion nodes.\n */\n\n\nclass VisualResponse {\n  constructor(visualResponseDescription) {\n    this.componentProperty = visualResponseDescription.componentProperty;\n    this.states = visualResponseDescription.states;\n    this.valueNodeName = visualResponseDescription.valueNodeName;\n    this.valueNodeProperty = visualResponseDescription.valueNodeProperty;\n\n    if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n      this.minNodeName = visualResponseDescription.minNodeName;\n      this.maxNodeName = visualResponseDescription.maxNodeName;\n    } // Initializes the response's current value based on default data\n\n\n    this.value = 0;\n    this.updateFromComponent(defaultComponentValues);\n  }\n  /**\n   * Computes the visual response's interpolation weight based on component state\n   * @param {Object} componentValues - The component from which to update\n   * @param {number} xAxis - The reported X axis value of the component\n   * @param {number} yAxis - The reported Y axis value of the component\n   * @param {number} button - The reported value of the component's button\n   * @param {string} state - The component's active state\n   */\n\n\n  updateFromComponent(_ref8) {\n    let {\n      xAxis,\n      yAxis,\n      button,\n      state\n    } = _ref8;\n    const {\n      normalizedXAxis,\n      normalizedYAxis\n    } = normalizeAxes(xAxis, yAxis);\n\n    switch (this.componentProperty) {\n      case MotionControllerConstants.ComponentProperty.X_AXIS:\n        this.value = this.states.includes(state) ? normalizedXAxis : 0.5;\n        break;\n\n      case MotionControllerConstants.ComponentProperty.Y_AXIS:\n        this.value = this.states.includes(state) ? normalizedYAxis : 0.5;\n        break;\n\n      case MotionControllerConstants.ComponentProperty.BUTTON:\n        this.value = this.states.includes(state) ? button : 0;\n        break;\n\n      case MotionControllerConstants.ComponentProperty.STATE:\n        if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n          this.value = this.states.includes(state);\n        } else {\n          this.value = this.states.includes(state) ? 1.0 : 0.0;\n        }\n\n        break;\n\n      default:\n        throw new Error(`Unexpected visualResponse componentProperty ${this.componentProperty}`);\n    }\n  }\n\n}\n\nclass Component {\n  /**\n   * @param {Object} componentId - Id of the component\n   * @param {Object} componentDescription - Description of the component to be created\n   */\n  constructor(componentId, componentDescription) {\n    if (!componentId || !componentDescription || !componentDescription.visualResponses || !componentDescription.gamepadIndices || Object.keys(componentDescription.gamepadIndices).length === 0) {\n      throw new Error('Invalid arguments supplied');\n    }\n\n    this.id = componentId;\n    this.type = componentDescription.type;\n    this.rootNodeName = componentDescription.rootNodeName;\n    this.touchPointNodeName = componentDescription.touchPointNodeName; // Build all the visual responses for this component\n\n    this.visualResponses = {};\n    Object.keys(componentDescription.visualResponses).forEach(responseName => {\n      const visualResponse = new VisualResponse(componentDescription.visualResponses[responseName]);\n      this.visualResponses[responseName] = visualResponse;\n    }); // Set default values\n\n    this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices);\n    this.values = {\n      state: MotionControllerConstants.ComponentState.DEFAULT,\n      button: this.gamepadIndices.button !== undefined ? 0 : undefined,\n      xAxis: this.gamepadIndices.xAxis !== undefined ? 0 : undefined,\n      yAxis: this.gamepadIndices.yAxis !== undefined ? 0 : undefined\n    };\n  }\n\n  get data() {\n    const data = {\n      id: this.id,\n      ...this.values\n    };\n    return data;\n  }\n  /**\n   * @description Poll for updated data based on current gamepad state\n   * @param {Object} gamepad - The gamepad object from which the component data should be polled\n   */\n\n\n  updateFromGamepad(gamepad) {\n    // Set the state to default before processing other data sources\n    this.values.state = MotionControllerConstants.ComponentState.DEFAULT; // Get and normalize button\n\n    if (this.gamepadIndices.button !== undefined && gamepad.buttons.length > this.gamepadIndices.button) {\n      const gamepadButton = gamepad.buttons[this.gamepadIndices.button];\n      this.values.button = gamepadButton.value;\n      this.values.button = this.values.button < 0 ? 0 : this.values.button;\n      this.values.button = this.values.button > 1 ? 1 : this.values.button; // Set the state based on the button\n\n      if (gamepadButton.pressed || this.values.button === 1) {\n        this.values.state = MotionControllerConstants.ComponentState.PRESSED;\n      } else if (gamepadButton.touched || this.values.button > MotionControllerConstants.ButtonTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    } // Get and normalize x axis value\n\n\n    if (this.gamepadIndices.xAxis !== undefined && gamepad.axes.length > this.gamepadIndices.xAxis) {\n      this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis];\n      this.values.xAxis = this.values.xAxis < -1 ? -1 : this.values.xAxis;\n      this.values.xAxis = this.values.xAxis > 1 ? 1 : this.values.xAxis; // If the state is still default, check if the xAxis makes it touched\n\n      if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.xAxis) > MotionControllerConstants.AxisTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    } // Get and normalize Y axis value\n\n\n    if (this.gamepadIndices.yAxis !== undefined && gamepad.axes.length > this.gamepadIndices.yAxis) {\n      this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis];\n      this.values.yAxis = this.values.yAxis < -1 ? -1 : this.values.yAxis;\n      this.values.yAxis = this.values.yAxis > 1 ? 1 : this.values.yAxis; // If the state is still default, check if the yAxis makes it touched\n\n      if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.yAxis) > MotionControllerConstants.AxisTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    } // Update the visual response weights based on the current component data\n\n\n    Object.values(this.visualResponses).forEach(visualResponse => {\n      visualResponse.updateFromComponent(this.values);\n    });\n  }\n\n}\n/**\n * @description Builds a motion controller with components and visual responses based on the\n * supplied profile description. Data is polled from the xrInputSource's gamepad.\n * @author Nell Waliczek / https://github.com/NellWaliczek\n */\n\n\nclass MotionController {\n  /**\n   * @param {Object} xrInputSource - The XRInputSource to build the MotionController around\n   * @param {Object} profile - The best matched profile description for the supplied xrInputSource\n   * @param {Object} assetUrl\n   */\n  constructor(xrInputSource, profile, assetUrl) {\n    if (!xrInputSource) {\n      throw new Error('No xrInputSource supplied');\n    }\n\n    if (!profile) {\n      throw new Error('No profile supplied');\n    }\n\n    this.xrInputSource = xrInputSource;\n    this.assetUrl = assetUrl;\n    this.id = profile.profileId; // Build child components as described in the profile description\n\n    this.layoutDescription = profile.layouts[xrInputSource.handedness];\n    this.components = {};\n    Object.keys(this.layoutDescription.components).forEach(componentId => {\n      const componentDescription = this.layoutDescription.components[componentId];\n      this.components[componentId] = new Component(componentId, componentDescription);\n    }); // Initialize components based on current gamepad state\n\n    this.updateFromGamepad();\n  }\n\n  get gripSpace() {\n    return this.xrInputSource.gripSpace;\n  }\n\n  get targetRaySpace() {\n    return this.xrInputSource.targetRaySpace;\n  }\n  /**\n   * @description Returns a subset of component data for simplified debugging\n   */\n\n\n  get data() {\n    const data = [];\n    Object.values(this.components).forEach(component => {\n      data.push(component.data);\n    });\n    return data;\n  }\n  /**\n   * @description Poll for updated data based on current gamepad state\n   */\n\n\n  updateFromGamepad() {\n    Object.values(this.components).forEach(component => {\n      component.updateFromGamepad(this.xrInputSource.gamepad);\n    });\n  }\n\n}\n\nconst DEFAULT_PROFILES_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles';\nconst DEFAULT_PROFILE = 'generic-trigger';\n\nclass XRControllerModel extends Object3D {\n  constructor() {\n    super();\n    this.motionController = null;\n    this.envMap = null;\n  }\n\n  setEnvironmentMap(envMap) {\n    if (this.envMap == envMap) {\n      return this;\n    }\n\n    this.envMap = envMap;\n    this.traverse(child => {\n      if (child.isMesh) {\n        child.material.envMap = this.envMap;\n        child.material.needsUpdate = true;\n      }\n    });\n    return this;\n  }\n  /**\n   * Polls data from the XRInputSource and updates the model's components to match\n   * the real world data\n   */\n\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (!this.motionController) return; // Cause the MotionController to poll the Gamepad for data\n\n    this.motionController.updateFromGamepad(); // Update the 3D model to reflect the button, thumbstick, and touchpad state\n\n    Object.values(this.motionController.components).forEach(component => {\n      // Update node data based on the visual responses' current states\n      Object.values(component.visualResponses).forEach(visualResponse => {\n        const {\n          valueNode,\n          minNode,\n          maxNode,\n          value,\n          valueNodeProperty\n        } = visualResponse; // Skip if the visual response node is not found. No error is needed,\n        // because it will have been reported at load time.\n\n        if (!valueNode) return; // Calculate the new properties based on the weight supplied\n\n        if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n          valueNode.visible = value;\n        } else if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n          valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value);\n          valueNode.position.lerpVectors(minNode.position, maxNode.position, value);\n        }\n      });\n    });\n  }\n\n}\n/**\n * Walks the model's tree to find the nodes needed to animate the components and\n * saves them to the motionContoller components for use in the frame loop. When\n * touchpads are found, attaches a touch dot to them.\n */\n\n\nfunction findNodes(motionController, scene) {\n  // Loop through the components and find the nodes needed for each components' visual responses\n  Object.values(motionController.components).forEach(component => {\n    const {\n      type,\n      touchPointNodeName,\n      visualResponses\n    } = component;\n\n    if (type === MotionControllerConstants.ComponentType.TOUCHPAD) {\n      component.touchPointNode = scene.getObjectByName(touchPointNodeName);\n\n      if (component.touchPointNode) {\n        // Attach a touch dot to the touchpad.\n        const sphereGeometry = new SphereGeometry(0.001);\n        const material = new MeshBasicMaterial({\n          color: 0x0000ff\n        });\n        const sphere = new Mesh(sphereGeometry, material);\n        component.touchPointNode.add(sphere);\n      } else {\n        console.warn(`Could not find touch dot, ${component.touchPointNodeName}, in touchpad component ${component.id}`);\n      }\n    } // Loop through all the visual responses to be applied to this component\n\n\n    Object.values(visualResponses).forEach(visualResponse => {\n      const {\n        valueNodeName,\n        minNodeName,\n        maxNodeName,\n        valueNodeProperty\n      } = visualResponse; // If animating a transform, find the two nodes to be interpolated between.\n\n      if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n        visualResponse.minNode = scene.getObjectByName(minNodeName);\n        visualResponse.maxNode = scene.getObjectByName(maxNodeName); // If the extents cannot be found, skip this animation\n\n        if (!visualResponse.minNode) {\n          console.warn(`Could not find ${minNodeName} in the model`);\n          return;\n        }\n\n        if (!visualResponse.maxNode) {\n          console.warn(`Could not find ${maxNodeName} in the model`);\n          return;\n        }\n      } // If the target node cannot be found, skip this animation\n\n\n      visualResponse.valueNode = scene.getObjectByName(valueNodeName);\n\n      if (!visualResponse.valueNode) {\n        console.warn(`Could not find ${valueNodeName} in the model`);\n      }\n    });\n  });\n}\n\nfunction addAssetSceneToControllerModel(controllerModel, scene) {\n  // Find the nodes needed for animation and cache them on the motionController.\n  findNodes(controllerModel.motionController, scene); // Apply any environment map that the mesh already has set.\n\n  if (controllerModel.envMap) {\n    scene.traverse(child => {\n      if (child.isMesh) {\n        child.material.envMap = controllerModel.envMap;\n        child.material.needsUpdate = true;\n      }\n    });\n  } // Add the glTF scene to the controllerModel.\n\n\n  controllerModel.add(scene);\n}\n\nclass XRControllerModelFactory {\n  constructor() {\n    let gltfLoader = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    this.gltfLoader = gltfLoader;\n    this.path = DEFAULT_PROFILES_PATH;\n    this._assetCache = {}; // If a GLTFLoader wasn't supplied to the constructor create a new one.\n\n    if (!this.gltfLoader) {\n      this.gltfLoader = new GLTFLoader();\n    }\n  }\n\n  createControllerModel(controller) {\n    const controllerModel = new XRControllerModel();\n    let scene = null;\n    controller.addEventListener('connected', event => {\n      const xrInputSource = event.data;\n      if (xrInputSource.targetRayMode !== 'tracked-pointer' || !xrInputSource.gamepad) return;\n      fetchProfile(xrInputSource, this.path, DEFAULT_PROFILE).then(_ref9 => {\n        let {\n          profile,\n          assetPath\n        } = _ref9;\n        controllerModel.motionController = new MotionController(xrInputSource, profile, assetPath);\n        const cachedAsset = this._assetCache[controllerModel.motionController.assetUrl];\n\n        if (cachedAsset) {\n          scene = cachedAsset.scene.clone();\n          addAssetSceneToControllerModel(controllerModel, scene);\n        } else {\n          if (!this.gltfLoader) {\n            throw new Error('GLTFLoader not set.');\n          }\n\n          this.gltfLoader.setPath('');\n          this.gltfLoader.load(controllerModel.motionController.assetUrl, asset => {\n            this._assetCache[controllerModel.motionController.assetUrl] = asset;\n            scene = asset.scene.clone();\n            addAssetSceneToControllerModel(controllerModel, scene);\n          }, null, () => {\n            throw new Error(`Asset ${controllerModel.motionController.assetUrl} missing or malformed.`);\n          });\n        }\n      }).catch(err => {\n        console.warn(err);\n      });\n    });\n    controller.addEventListener('disconnected', () => {\n      controllerModel.motionController = null;\n      controllerModel.remove(scene);\n      scene = null;\n    });\n    return controllerModel;\n  }\n\n}\n\nconst modelFactory = new XRControllerModelFactory();\nconst modelCache = new WeakMap();\n\nfunction DefaultXRControllers(_ref10) {\n  let {\n    rayMaterial = {}\n  } = _ref10;\n  const {\n    scene\n  } = useThree();\n  const {\n    controllers,\n    hoverState\n  } = useXR();\n  const [rays] = React__default.useState(new Map()); // Show ray line when hovering objects\n\n  useFrame(() => {\n    controllers.forEach(it => {\n      const ray = rays.get(it.controller.id);\n      if (!ray) return;\n      const intersection = hoverState[it.inputSource.handedness].values().next().value;\n\n      if (!intersection || it.inputSource.handedness === 'none') {\n        ray.visible = false;\n        return;\n      }\n\n      const rayLength = intersection.distance; // Tiny offset to clip ray on AR devices\n      // that don't have handedness set to 'none'\n\n      const offset = -0.01;\n      ray.visible = true;\n      ray.scale.y = rayLength + offset;\n      ray.position.z = -rayLength / 2 - offset;\n    });\n  });\n  useEffect(() => {\n    const cleanups = [];\n    controllers.forEach(_ref11 => {\n      let {\n        controller,\n        grip,\n        inputSource\n      } = _ref11;\n      // Attach 3D model of the controller\n      let model;\n\n      if (modelCache.has(controller)) {\n        model = modelCache.get(controller);\n      } else {\n        model = modelFactory.createControllerModel(controller);\n        controller.dispatchEvent({\n          type: 'connected',\n          data: inputSource,\n          fake: true\n        });\n        modelCache.set(controller, model);\n      }\n\n      grip.add(model); // Add Ray line (used for hovering)\n\n      const ray = new Mesh();\n      ray.rotation.set(Math.PI / 2, 0, 0);\n      ray.material = new MeshBasicMaterial({\n        color: new Color(0xffffff),\n        opacity: 0.8,\n        transparent: true,\n        ...rayMaterial\n      });\n      ray.geometry = new BoxBufferGeometry(0.002, 1, 0.002);\n      rays.set(controller.id, ray);\n      controller.add(ray);\n      cleanups.push(() => {\n        grip.remove(model);\n        controller.remove(ray);\n        rays.delete(controller.id);\n      });\n    });\n    return () => {\n      cleanups.forEach(fn => fn());\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [controllers, scene, rays, JSON.stringify(rayMaterial)]);\n  return null;\n}\n\nconst DEFAULT_HAND_PROFILE_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles/generic-hand/';\n\nclass XRHandMeshModel {\n  constructor(handModel, controller, path, handedness, customModel) {\n    this.controller = controller;\n    this.handModel = handModel;\n    this.bones = [];\n    const loader = new GLTFLoader();\n    if (!customModel) loader.setPath(path || DEFAULT_HAND_PROFILE_PATH);\n    loader.load(customModel != null ? customModel : `${handedness}.glb`, gltf => {\n      const object = gltf.scene.children[0];\n      this.handModel.add(object);\n      const mesh = object.getObjectByProperty('type', 'SkinnedMesh');\n      mesh.frustumCulled = false;\n      mesh.castShadow = true;\n      mesh.receiveShadow = true;\n      mesh.material.side = 0; // Workaround: force FrontSide\n\n      const joints = ['wrist', 'thumb-metacarpal', 'thumb-phalanx-proximal', 'thumb-phalanx-distal', 'thumb-tip', 'index-finger-metacarpal', 'index-finger-phalanx-proximal', 'index-finger-phalanx-intermediate', 'index-finger-phalanx-distal', 'index-finger-tip', 'middle-finger-metacarpal', 'middle-finger-phalanx-proximal', 'middle-finger-phalanx-intermediate', 'middle-finger-phalanx-distal', 'middle-finger-tip', 'ring-finger-metacarpal', 'ring-finger-phalanx-proximal', 'ring-finger-phalanx-intermediate', 'ring-finger-phalanx-distal', 'ring-finger-tip', 'pinky-finger-metacarpal', 'pinky-finger-phalanx-proximal', 'pinky-finger-phalanx-intermediate', 'pinky-finger-phalanx-distal', 'pinky-finger-tip'];\n      joints.forEach(jointName => {\n        const bone = object.getObjectByName(jointName);\n\n        if (bone !== undefined) {\n          bone.jointName = jointName;\n        } else {\n          console.warn(`Couldn't find ${jointName} in ${handedness} hand mesh`);\n        }\n\n        this.bones.push(bone);\n      });\n    });\n  }\n\n  updateMesh() {\n    // XR Joints\n    const XRJoints = this.controller.joints;\n\n    for (let i = 0; i < this.bones.length; i++) {\n      const bone = this.bones[i];\n\n      if (bone) {\n        const XRJoint = XRJoints[bone.jointName];\n\n        if (XRJoint.visible) {\n          const position = XRJoint.position;\n\n          if (bone) {\n            bone.position.copy(position);\n            bone.quaternion.copy(XRJoint.quaternion); // bone.scale.setScalar( XRJoint.jointRadius || defaultRadius );\n          }\n        }\n      }\n    }\n  }\n\n  dispose() {\n    this.handModel.traverse(node => {\n      if (!node) return;\n\n      if (node.type !== 'Scene') {\n        node.dispose == null ? void 0 : node.dispose(); // Dispose of its properties as well\n\n        for (const property in node) {\n          if (property.dispose) property.dispose == null ? void 0 : property.dispose();\n          delete node[property];\n        }\n      }\n    });\n    this.bones = [];\n  }\n\n}\n\nconst TOUCH_RADIUS = 0.01;\nconst POINTING_JOINT = 'index-finger-tip';\n\nclass HandModel extends Object3D {\n  constructor(controller, customModels) {\n    super();\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n    controller.addEventListener('connected', event => {\n      const xrInputSource = event.data;\n\n      if (xrInputSource.hand && !this.motionController) {\n        this.xrInputSource = xrInputSource;\n        this.motionController = new XRHandMeshModel(this, controller, this.path, xrInputSource.handedness, xrInputSource.handedness === 'left' ? customModels[0] : customModels[1]);\n      }\n    });\n    controller.addEventListener('disconnected', () => {\n      this.dispose();\n    });\n  }\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n\n  getPointerPosition() {\n    const indexFingerTip = this.controller.joints[POINTING_JOINT];\n\n    if (indexFingerTip) {\n      return indexFingerTip.position;\n    } else {\n      return null;\n    }\n  }\n\n  intersectBoxObject(boxObject) {\n    const pointerPosition = this.getPointerPosition();\n\n    if (pointerPosition) {\n      const indexSphere = new Sphere(pointerPosition, TOUCH_RADIUS);\n      const box = new Box3().setFromObject(boxObject);\n      return indexSphere.intersectsBox(box);\n    } else {\n      return false;\n    }\n  }\n\n  checkButton(button) {\n    if (this.intersectBoxObject(button)) {\n      button.onPress();\n    } else {\n      button.onClear();\n    }\n\n    if (button.isPressed()) {\n      button.whilePressed();\n    }\n  }\n\n  dispose() {\n    var _this$motionControlle, _this$motionControlle2;\n\n    this.clear();\n    if (this.motionController) (_this$motionControlle = (_this$motionControlle2 = this.motionController).dispose) == null ? void 0 : _this$motionControlle.call(_this$motionControlle2);\n    this.motionController = null;\n  }\n\n}\n\nfunction Hands(props) {\n  const {\n    scene,\n    gl\n  } = useThree();\n  const {\n    controllers\n  } = useXR();\n  useEffect(() => {\n    controllers.forEach(_ref12 => {\n      let {\n        hand,\n        inputSource\n      } = _ref12;\n      const handModel = hand.children.find(child => child instanceof HandModel);\n\n      if (handModel) {\n        hand.remove(handModel);\n        handModel.dispose();\n      }\n\n      hand.add(new HandModel(hand, [props.modelLeft, props.modelRight])); // throwing fake event for the Oculus Hand Model so it starts loading\n\n      hand.dispatchEvent({\n        type: 'connected',\n        data: inputSource,\n        fake: true\n      });\n    });\n    return () => {\n      controllers.forEach(_ref13 => {\n        let {\n          hand\n        } = _ref13;\n        const handModel = hand.children.find(child => child instanceof HandModel);\n\n        if (handModel) {\n          hand.remove(handModel);\n          handModel.dispose();\n        }\n      });\n    };\n  }, [scene, gl, controllers, props.modelLeft, props.modelRight]);\n  return null;\n}\n\nexport { ARCanvas, DefaultXRControllers, Hands, InteractionManager, InteractionsContext, Interactive, RayGrab, VRCanvas, XR, XRButton, XRController, useController, useHitTest, useInteraction, useXR, useXRButton, useXREvent, useXRFrame };","map":{"version":3,"names":["_extends","React","React__default","useMemo","useContext","useRef","useEffect","forwardRef","useThree","useFrame","Canvas","Matrix4","Group","Object3D","SphereGeometry","MeshBasicMaterial","Mesh","Color","BoxBufferGeometry","Sphere","Box3","mergeRefs","GLTFLoader","ARButton","createButton","renderer","sessionInit","button","document","createElement","showStartAR","domOverlay","undefined","overlay","style","display","body","appendChild","svg","createElementNS","setAttribute","position","right","top","addEventListener","currentSession","end","path","optionalFeatures","push","root","onSessionStarted","session","onSessionEnded","xr","setReferenceSpaceType","setSession","textContent","removeEventListener","cursor","left","width","onmouseenter","opacity","onmouseleave","onclick","navigator","requestSession","then","disableButton","showARNotSupported","stylizeElement","element","bottom","padding","border","borderRadius","background","color","font","textAlign","outline","zIndex","id","isSessionSupported","supported","catch","message","window","isSecureContext","href","location","replace","innerHTML","textDecoration","VRButton","showEnterVR","flat","filter","Boolean","showWebXRNotFound","XRController","make","gl","onConnected","onDisconnected","controller","getController","grip","getControllerGrip","hand","getHand","xrController","inputSource","userData","name","event","fake","data","_","ObjectsState","Map","add","state","object","key","value","has","set","entry","get","delete","it","length","Object","keys","useXREvent","handler","handedness","handlerRef","current","controllers","allControllers","useXR","cleanups","forEach","listener","e","originalEvent","fn","warnAboutVRARCanvas","console","warn","InteractionsContext","createContext","hoverState","addInteraction","removeInteraction","InteractionManager","children","useState","none","interactions","useCallback","eventType","intersect","objects","Array","from","tempMatrix","identity","extractRotation","matrixWorld","raycaster","ray","origin","setFromMatrixPosition","direction","applyMatrix4","intersectObjects","size","hovering","hits","Set","intersections","hit","find","i","intersection","eventObject","_ObjectsState$get","parent","_ObjectsState$get2","triggerEvent","interaction","hovered","_ObjectsState$get3","contextValue","Provider","useInteraction","ref","type","isPresent","handlerFn","maybeRef","Interactive","props","passedRef","onHover","onBlur","onSelectStart","onSelectEnd","onSelect","onSqueezeStart","onSqueezeEnd","onSqueeze","RayGrab","grabbingController","groupRef","previousTransform","group","updateWorldMatrix","clone","invert","XRContext","useControllers","setControllers","ids","remove","existing","useHitTest","hitTestCallback","hitTestSource","hitTestSourceRequested","hitMatrix","isPresenting","getSession","requestReferenceSpace","referenceSpace","requestHitTestSource","space","source","once","getReferenceSpace","requestAnimationFrame","time","frame","hitTestResults","getHitTestResults","pose","getPose","fromArray","transform","matrix","XR","foveation","camera","setIsPresenting","isHandTracking","setHandTracking","player","handleSessionChange","setFoveation","_session$inputSources","handleInputSourcesChange","values","inputSources","some","dispose","XRCanvas","rest","vr","useXRButton","mode","container","target","useLayoutEffect","_container$current","removeChild","XRButton","VRCanvas","ARCanvas","xrValue","interactionsValue","useXRFrame","callback","requestRef","previousTimeRef","loop","xrFrame","_gl$xr","cancelAnimationFrame","useController","MotionControllerConstants","Handedness","freeze","NONE","LEFT","RIGHT","ComponentState","DEFAULT","TOUCHED","PRESSED","ComponentProperty","BUTTON","X_AXIS","Y_AXIS","STATE","ComponentType","TRIGGER","SQUEEZE","TOUCHPAD","THUMBSTICK","ButtonTouchThreshold","AxisTouchThreshold","VisualResponseProperty","TRANSFORM","VISIBILITY","fetchJsonFile","response","fetch","ok","Error","statusText","json","fetchProfilesList","basePath","profileListFileName","profilesList","fetchProfile","xrInputSource","defaultProfile","getAssetPath","supportedProfilesList","match","profiles","profileId","supportedProfile","profilePath","deprecated","profile","assetPath","layout","layouts","defaultComponentValues","xAxis","yAxis","normalizeAxes","x","y","hypotenuse","Math","sqrt","theta","atan2","cos","sin","result","normalizedXAxis","normalizedYAxis","VisualResponse","constructor","visualResponseDescription","componentProperty","states","valueNodeName","valueNodeProperty","minNodeName","maxNodeName","updateFromComponent","includes","Component","componentId","componentDescription","visualResponses","gamepadIndices","rootNodeName","touchPointNodeName","responseName","visualResponse","assign","updateFromGamepad","gamepad","buttons","gamepadButton","pressed","touched","axes","abs","MotionController","assetUrl","layoutDescription","components","gripSpace","targetRaySpace","component","DEFAULT_PROFILES_PATH","DEFAULT_PROFILE","XRControllerModel","motionController","envMap","setEnvironmentMap","traverse","child","isMesh","material","needsUpdate","updateMatrixWorld","force","valueNode","minNode","maxNode","visible","quaternion","slerpQuaternions","lerpVectors","findNodes","scene","touchPointNode","getObjectByName","sphereGeometry","sphere","addAssetSceneToControllerModel","controllerModel","XRControllerModelFactory","gltfLoader","_assetCache","createControllerModel","targetRayMode","cachedAsset","setPath","load","asset","err","modelFactory","modelCache","WeakMap","DefaultXRControllers","rayMaterial","rays","next","rayLength","distance","offset","scale","z","model","dispatchEvent","rotation","PI","transparent","geometry","JSON","stringify","DEFAULT_HAND_PROFILE_PATH","XRHandMeshModel","handModel","customModel","bones","loader","gltf","mesh","getObjectByProperty","frustumCulled","castShadow","receiveShadow","side","joints","jointName","bone","updateMesh","XRJoints","XRJoint","copy","node","property","TOUCH_RADIUS","POINTING_JOINT","HandModel","customModels","getPointerPosition","indexFingerTip","intersectBoxObject","boxObject","pointerPosition","indexSphere","box","setFromObject","intersectsBox","checkButton","onPress","onClear","isPressed","whilePressed","_this$motionControlle","_this$motionControlle2","clear","call","Hands","modelLeft","modelRight"],"sources":["/Users/ilyamarvin/Desktop/VR/grab-test/node_modules/@react-three/xr/dist/index.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport React__default, { useMemo, useContext, useRef, useEffect, forwardRef } from 'react';\nimport { useThree, useFrame, Canvas } from '@react-three/fiber';\nimport { Matrix4, Group, Object3D, SphereGeometry, MeshBasicMaterial, Mesh, Color, BoxBufferGeometry, Sphere, Box3 } from 'three';\nimport mergeRefs from 'react-merge-refs';\nimport { GLTFLoader } from 'three-stdlib';\n\nclass ARButton {\n  static createButton(renderer, sessionInit = {}) {\n    const button = document.createElement('button');\n\n    function\n      /*device*/\n    showStartAR() {\n      if (sessionInit.domOverlay === undefined) {\n        const overlay = document.createElement('div');\n        overlay.style.display = 'none';\n        document.body.appendChild(overlay);\n        const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        svg.setAttribute('width', 38);\n        svg.setAttribute('height', 38);\n        svg.style.position = 'absolute';\n        svg.style.right = '20px';\n        svg.style.top = '20px';\n        svg.addEventListener('click', function () {\n          currentSession.end();\n        });\n        overlay.appendChild(svg);\n        const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        path.setAttribute('d', 'M 12,12 L 28,28 M 28,12 12,28');\n        path.setAttribute('stroke', '#fff');\n        path.setAttribute('stroke-width', 2);\n        svg.appendChild(path);\n\n        if (sessionInit.optionalFeatures === undefined) {\n          sessionInit.optionalFeatures = [];\n        }\n\n        sessionInit.optionalFeatures.push('dom-overlay');\n        sessionInit.domOverlay = {\n          root: overlay\n        };\n      } //\n\n\n      let currentSession = null;\n\n      async function onSessionStarted(session) {\n        session.addEventListener('end', onSessionEnded);\n        renderer.xr.setReferenceSpaceType('local');\n        await renderer.xr.setSession(session);\n        button.textContent = 'STOP AR';\n        sessionInit.domOverlay.root.style.display = '';\n        currentSession = session;\n      }\n\n      function\n        /*event*/\n      onSessionEnded() {\n        currentSession.removeEventListener('end', onSessionEnded);\n        button.textContent = 'START AR';\n        sessionInit.domOverlay.root.style.display = 'none';\n        currentSession = null;\n      } //\n\n\n      button.style.display = '';\n      button.style.cursor = 'pointer';\n      button.style.left = 'calc(50% - 50px)';\n      button.style.width = '100px';\n      button.textContent = 'START AR';\n\n      button.onmouseenter = function () {\n        button.style.opacity = '1.0';\n      };\n\n      button.onmouseleave = function () {\n        button.style.opacity = '0.5';\n      };\n\n      button.onclick = function () {\n        if (currentSession === null) {\n          navigator.xr.requestSession('immersive-ar', sessionInit).then(onSessionStarted);\n        } else {\n          currentSession.end();\n        }\n      };\n    }\n\n    function disableButton() {\n      button.style.display = '';\n      button.style.cursor = 'auto';\n      button.style.left = 'calc(50% - 75px)';\n      button.style.width = '150px';\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n      button.onclick = null;\n    }\n\n    function showARNotSupported() {\n      disableButton();\n      button.textContent = 'AR NOT SUPPORTED';\n    }\n\n    function stylizeElement(element) {\n      element.style.position = 'absolute';\n      element.style.bottom = '20px';\n      element.style.padding = '12px 6px';\n      element.style.border = '1px solid #fff';\n      element.style.borderRadius = '4px';\n      element.style.background = 'rgba(0,0,0,0.1)';\n      element.style.color = '#fff';\n      element.style.font = 'normal 13px sans-serif';\n      element.style.textAlign = 'center';\n      element.style.opacity = '0.5';\n      element.style.outline = 'none';\n      element.style.zIndex = '999';\n    }\n\n    if ('xr' in navigator) {\n      button.id = 'ARButton';\n      button.style.display = 'none';\n      stylizeElement(button);\n      navigator.xr.isSessionSupported('immersive-ar').then(function (supported) {\n        supported ? showStartAR() : showARNotSupported();\n      }).catch(showARNotSupported);\n      return button;\n    } else {\n      const message = document.createElement('a');\n\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:');\n        message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/';\n        message.innerHTML = 'WEBXR NOT AVAILABLE';\n      }\n\n      message.style.left = 'calc(50% - 90px)';\n      message.style.width = '180px';\n      message.style.textDecoration = 'none';\n      stylizeElement(message);\n      return message;\n    }\n  }\n\n}\n\nclass VRButton {\n  static createButton(renderer, sessionInit = {}) {\n    const button = document.createElement('button');\n\n    function\n      /*device*/\n    showEnterVR() {\n      let currentSession = null;\n\n      async function onSessionStarted(session) {\n        session.addEventListener('end', onSessionEnded);\n        await renderer.xr.setSession(session);\n        button.textContent = 'EXIT VR';\n        currentSession = session;\n      }\n\n      function\n        /*event*/\n      onSessionEnded() {\n        currentSession.removeEventListener('end', onSessionEnded);\n        button.textContent = 'ENTER VR';\n        currentSession = null;\n      } //\n\n\n      button.style.display = '';\n      button.style.cursor = 'pointer';\n      button.style.left = 'calc(50% - 50px)';\n      button.style.width = '100px';\n      button.textContent = 'ENTER VR';\n\n      button.onmouseenter = function () {\n        button.style.opacity = '1.0';\n      };\n\n      button.onmouseleave = function () {\n        button.style.opacity = '0.5';\n      };\n\n      button.onclick = function () {\n        if (currentSession === null) {\n          // WebXR's requestReferenceSpace only works if the corresponding feature\n          // was requested at session creation time. For simplicity, just ask for\n          // the interesting ones as optional features, but be aware that the\n          // requestReferenceSpace call will fail if it turns out to be unavailable.\n          // ('local' is always available for immersive sessions and doesn't need to\n          // be requested separately.)\n          const optionalFeatures = [sessionInit.optionalFeatures, 'local-floor', 'bounded-floor', 'hand-tracking'].flat().filter(Boolean);\n          navigator.xr.requestSession('immersive-vr', { ...sessionInit,\n            optionalFeatures\n          }).then(onSessionStarted);\n        } else {\n          currentSession.end();\n        }\n      };\n    }\n\n    function disableButton() {\n      button.style.display = '';\n      button.style.cursor = 'auto';\n      button.style.left = 'calc(50% - 75px)';\n      button.style.width = '150px';\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n      button.onclick = null;\n    }\n\n    function showWebXRNotFound() {\n      disableButton();\n      button.textContent = 'VR NOT SUPPORTED';\n    }\n\n    function stylizeElement(element) {\n      element.style.position = 'absolute';\n      element.style.bottom = '20px';\n      element.style.padding = '12px 6px';\n      element.style.border = '1px solid #fff';\n      element.style.borderRadius = '4px';\n      element.style.background = 'rgba(0,0,0,0.1)';\n      element.style.color = '#fff';\n      element.style.font = 'normal 13px sans-serif';\n      element.style.textAlign = 'center';\n      element.style.opacity = '0.5';\n      element.style.outline = 'none';\n      element.style.zIndex = '999';\n    }\n\n    if ('xr' in navigator) {\n      button.id = 'VRButton';\n      button.style.display = 'none';\n      stylizeElement(button);\n      navigator.xr.isSessionSupported('immersive-vr').then(function (supported) {\n        supported ? showEnterVR() : showWebXRNotFound();\n      });\n      return button;\n    } else {\n      const message = document.createElement('a');\n\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:');\n        message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/';\n        message.innerHTML = 'WEBXR NOT AVAILABLE';\n      }\n\n      message.style.left = 'calc(50% - 90px)';\n      message.style.width = '180px';\n      message.style.textDecoration = 'none';\n      stylizeElement(message);\n      return message;\n    }\n  }\n\n}\n\nconst XRController = {\n  make: (id, gl, onConnected, onDisconnected) => {\n    const controller = gl.xr.getController(id);\n    const grip = gl.xr.getControllerGrip(id);\n    const hand = gl.xr.getHand(id);\n    const xrController = {\n      inputSource: undefined,\n      grip,\n      controller,\n      hand\n    };\n    grip.userData.name = 'grip';\n    controller.userData.name = 'controller';\n    hand.userData.name = 'hand';\n    controller.addEventListener('connected', event => {\n      if (event.fake) {\n        return;\n      }\n\n      xrController.inputSource = event.data;\n      onConnected(xrController);\n    });\n    controller.addEventListener('disconnected', _ => {\n      onDisconnected(xrController);\n    });\n  }\n};\n\n/**\n * Store data associated with some objects in the scene\n *\n * For example storing event handlers:\n *\n * objectA:\n *   onClick: [handler, handler]\n * objectB:\n *   onHover: [handler]\n *   onBlur:  [handler]\n *\n */\nconst ObjectsState = {\n  make: function () {\n    return new Map();\n  },\n  add: function (state, object, key, value) {\n    if (!state.has(object)) {\n      state.set(object, {\n        key: [value]\n      });\n    }\n\n    const entry = state.get(object);\n\n    if (!entry[key]) {\n      entry[key] = [];\n    }\n\n    entry[key].push(value);\n  },\n  delete: function (state, object, key, value) {\n    const entry = state.get(object);\n    if (!entry || !entry[key]) return;\n    entry[key] = entry[key].filter(it => it !== value);\n\n    if (entry[key].length === 0) {\n      delete entry[key];\n    } // Remove entry if nothing left\n\n\n    if (Object.keys(entry).length === 0) {\n      state.delete(object);\n    }\n  },\n  has: function (state, object, key) {\n    const entry = state.get(object);\n    return !!(entry && entry[key]);\n  },\n  get: function (state, object, key) {\n    const entry = state.get(object);\n    return entry && entry[key];\n  }\n};\n\nconst useXREvent = (event, handler, {\n  handedness\n} = {}) => {\n  const handlerRef = React__default.useRef(handler);\n  React__default.useEffect(() => {\n    handlerRef.current = handler;\n  }, [handler]);\n  const {\n    controllers: allControllers\n  } = useXR();\n  React__default.useEffect(() => {\n    const controllers = handedness ? allControllers.filter(it => it.inputSource.handedness === handedness) : allControllers;\n    const cleanups = [];\n    controllers.forEach(it => {\n      const listener = e => handlerRef.current({\n        originalEvent: e,\n        controller: it\n      });\n\n      it.controller.addEventListener(event, listener);\n      cleanups.push(() => it.controller.removeEventListener(event, listener));\n    });\n    return () => cleanups.forEach(fn => fn());\n  }, [event, allControllers, handedness]);\n};\n\nconst warnAboutVRARCanvas = () => console.warn('You must provide a ARCanvas or VRCanvas as a wrapper to use interactions');\n\nconst InteractionsContext = /*#__PURE__*/React__default.createContext({\n  hoverState: {},\n  addInteraction: warnAboutVRARCanvas,\n  removeInteraction: warnAboutVRARCanvas\n});\nfunction InteractionManager({\n  children\n}) {\n  const state = useThree();\n  const {\n    controllers\n  } = useXR();\n  const [hoverState] = React__default.useState(() => ({\n    left: new Map(),\n    right: new Map(),\n    none: new Map()\n  }));\n  const [interactions] = React__default.useState(() => ObjectsState.make());\n  const addInteraction = React__default.useCallback((object, eventType, handler) => {\n    ObjectsState.add(interactions, object, eventType, handler);\n  }, [interactions]);\n  const removeInteraction = React__default.useCallback((object, eventType, handler) => {\n    ObjectsState.delete(interactions, object, eventType, handler);\n  }, [interactions]);\n  const intersect = React__default.useCallback(controller => {\n    const objects = Array.from(interactions.keys());\n    const tempMatrix = new Matrix4();\n    tempMatrix.identity().extractRotation(controller.matrixWorld);\n    state.raycaster.ray.origin.setFromMatrixPosition(controller.matrixWorld);\n    state.raycaster.ray.direction.set(0, 0, -1).applyMatrix4(tempMatrix);\n    return state.raycaster.intersectObjects(objects, true);\n  }, [interactions, state.raycaster]); // Trigger hover and blur events\n\n  useFrame(() => {\n    if (interactions.size === 0) {\n      return;\n    }\n\n    controllers.forEach(it => {\n      const {\n        controller\n      } = it;\n      const handedness = it.inputSource.handedness;\n      const hovering = hoverState[handedness];\n      const hits = new Set();\n      let intersections = intersect(controller);\n\n      if (state.raycaster.filter) {\n        // https://github.com/mrdoob/three.js/issues/16031\n        // Allow custom userland intersect sort order\n        intersections = state.raycaster.filter(intersections, state);\n      } else {\n        // Otherwise, filter to first hit\n        const hit = intersections.find(i => i == null ? void 0 : i.object);\n        if (hit) intersections = [hit];\n      }\n\n      intersections.forEach(intersection => {\n        let eventObject = intersection.object;\n\n        while (eventObject) {\n          if (ObjectsState.has(interactions, eventObject, 'onHover') && !hovering.has(eventObject)) {\n            var _ObjectsState$get;\n\n            (_ObjectsState$get = ObjectsState.get(interactions, eventObject, 'onHover')) == null ? void 0 : _ObjectsState$get.forEach(handler => handler({\n              controller: it,\n              intersection\n            }));\n          }\n\n          hovering.set(eventObject, intersection);\n          hits.add(eventObject.id);\n          eventObject = eventObject.parent;\n        }\n      }); // Trigger blur on all the object that were hovered in the previous frame\n      // but missed in this one\n\n      for (const eventObject of hovering.keys()) {\n        if (!hits.has(eventObject.id)) {\n          var _ObjectsState$get2;\n\n          (_ObjectsState$get2 = ObjectsState.get(interactions, eventObject, 'onBlur')) == null ? void 0 : _ObjectsState$get2.forEach(handler => handler({\n            controller: it\n          }));\n          hovering.delete(eventObject);\n        }\n      }\n    });\n  });\n\n  const triggerEvent = interaction => e => {\n    const hovering = hoverState[e.controller.inputSource.handedness];\n\n    for (const hovered of hovering.keys()) {\n      var _ObjectsState$get3;\n\n      (_ObjectsState$get3 = ObjectsState.get(interactions, hovered, interaction)) == null ? void 0 : _ObjectsState$get3.forEach(handler => handler({\n        controller: e.controller,\n        intersection: hovering.get(hovered)\n      }));\n    }\n  };\n\n  useXREvent('select', triggerEvent('onSelect'));\n  useXREvent('selectstart', triggerEvent('onSelectStart'));\n  useXREvent('selectend', triggerEvent('onSelectEnd'));\n  useXREvent('squeeze', triggerEvent('onSqueeze'));\n  useXREvent('squeezeend', triggerEvent('onSqueezeEnd'));\n  useXREvent('squeezestart', triggerEvent('onSqueezeStart'));\n  const contextValue = useMemo(() => ({\n    addInteraction,\n    removeInteraction,\n    hoverState\n  }), [addInteraction, removeInteraction, hoverState]);\n  return /*#__PURE__*/React__default.createElement(InteractionsContext.Provider, {\n    value: contextValue\n  }, children);\n}\nconst useInteraction = (ref, type, handler) => {\n  const {\n    addInteraction,\n    removeInteraction\n  } = useContext(InteractionsContext);\n  const isPresent = handler !== undefined;\n  const handlerRef = useRef(handler);\n  useEffect(() => {\n    handlerRef.current = handler;\n  }, [handler]);\n  useEffect(() => {\n    if (!isPresent) return;\n\n    const handlerFn = e => {\n      handlerRef.current == null ? void 0 : handlerRef.current(e);\n    };\n\n    addInteraction(ref.current, type, handlerFn);\n    const maybeRef = ref.current;\n    return () => removeInteraction(maybeRef, type, handlerFn);\n  }, [type, addInteraction, removeInteraction, isPresent, ref]);\n};\nconst Interactive = /*#__PURE__*/forwardRef((props, passedRef) => {\n  const ref = useRef();\n  useInteraction(ref, 'onHover', props.onHover);\n  useInteraction(ref, 'onBlur', props.onBlur);\n  useInteraction(ref, 'onSelectStart', props.onSelectStart);\n  useInteraction(ref, 'onSelectEnd', props.onSelectEnd);\n  useInteraction(ref, 'onSelect', props.onSelect);\n  useInteraction(ref, 'onSqueezeStart', props.onSqueezeStart);\n  useInteraction(ref, 'onSqueezeEnd', props.onSqueezeEnd);\n  useInteraction(ref, 'onSqueeze', props.onSqueeze);\n  return /*#__PURE__*/React__default.createElement(\"group\", {\n    ref: mergeRefs([passedRef, ref])\n  }, props.children);\n});\nfunction RayGrab({\n  children\n}) {\n  const grabbingController = useRef();\n  const groupRef = useRef();\n  const previousTransform = useRef(undefined);\n  useXREvent('selectend', e => {\n    if (e.controller.controller === grabbingController.current) {\n      grabbingController.current = undefined;\n      previousTransform.current = undefined;\n    }\n  });\n  useFrame(() => {\n    if (!grabbingController.current || !previousTransform.current || !groupRef.current) {\n      return;\n    }\n\n    const controller = grabbingController.current;\n    const group = groupRef.current;\n    group.applyMatrix4(previousTransform.current);\n    group.applyMatrix4(controller.matrixWorld);\n    group.updateWorldMatrix(false, true);\n    previousTransform.current = controller.matrixWorld.clone().invert();\n  });\n  return /*#__PURE__*/React__default.createElement(Interactive, {\n    ref: groupRef,\n    onSelectStart: e => {\n      grabbingController.current = e.controller.controller;\n      previousTransform.current = e.controller.controller.matrixWorld.clone().invert();\n    }\n  }, children);\n}\n\nconst XRContext = /*#__PURE__*/React.createContext({});\n\nconst useControllers = group => {\n  const {\n    gl\n  } = useThree();\n  const [controllers, setControllers] = React.useState([]);\n  React.useEffect(() => {\n    const ids = [0, 1];\n    ids.forEach(id => {\n      XRController.make(id, gl, controller => {\n        group.add(controller.controller);\n        group.add(controller.grip);\n        group.add(controller.hand);\n        setControllers(it => [...it, controller]);\n      }, controller => {\n        group.remove(controller.controller);\n        group.remove(controller.grip);\n        group.remove(controller.hand);\n        setControllers(existing => existing.filter(it => it !== controller));\n      });\n    });\n  }, [gl, group]);\n  return controllers;\n};\n\nfunction useHitTest(hitTestCallback) {\n  const {\n    gl\n  } = useThree();\n  const hitTestSource = React.useRef();\n  const hitTestSourceRequested = React.useRef(false);\n  const [hitMatrix] = React.useState(() => new Matrix4());\n  useFrame(() => {\n    if (!gl.xr.isPresenting) return;\n    const session = gl.xr.getSession();\n    if (!session) return;\n\n    if (!hitTestSourceRequested.current) {\n      session.requestReferenceSpace('viewer').then(referenceSpace => {\n        session.requestHitTestSource({\n          space: referenceSpace\n        }).then(source => {\n          hitTestSource.current = source;\n        });\n      });\n      session.addEventListener('end', () => {\n        hitTestSourceRequested.current = false;\n        hitTestSource.current = undefined;\n      }, {\n        once: true\n      });\n      hitTestSourceRequested.current = true;\n    }\n\n    if (hitTestSource.current && gl.xr.isPresenting) {\n      const referenceSpace = gl.xr.getReferenceSpace();\n\n      if (referenceSpace) {\n        // This raf is unnecesary, we should get XRFrame from r3f but it's not implemented yet\n        session.requestAnimationFrame((time, frame) => {\n          const hitTestResults = frame.getHitTestResults(hitTestSource.current);\n\n          if (hitTestResults.length) {\n            const hit = hitTestResults[0];\n            const pose = hit.getPose(referenceSpace);\n\n            if (pose) {\n              hitMatrix.fromArray(pose.transform.matrix);\n              hitTestCallback(hitMatrix, hit);\n            }\n          }\n        });\n      }\n    }\n  });\n}\nfunction XR({\n  foveation = 0,\n  children\n}) {\n  const {\n    gl,\n    camera\n  } = useThree();\n  const [isPresenting, setIsPresenting] = React.useState(() => gl.xr.isPresenting);\n  const [isHandTracking, setHandTracking] = React.useState(false);\n  const [player] = React.useState(() => new Group());\n  const controllers = useControllers(player);\n  React.useEffect(() => {\n    const xr = gl.xr;\n\n    const handleSessionChange = () => setIsPresenting(xr.isPresenting);\n\n    xr.addEventListener('sessionstart', handleSessionChange);\n    xr.addEventListener('sessionend', handleSessionChange);\n    return () => {\n      xr.removeEventListener('sessionstart', handleSessionChange);\n      xr.removeEventListener('sessionend', handleSessionChange);\n    };\n  }, [gl]);\n  React.useEffect(() => {\n    const xr = gl.xr;\n\n    if (xr.setFoveation) {\n      xr.setFoveation(foveation);\n    }\n  }, [gl, foveation]);\n  React.useEffect(() => {\n    var _session$inputSources;\n\n    const session = gl.xr.getSession();\n\n    const handleInputSourcesChange = event => setHandTracking(Object.values(event.session.inputSources).some(source => source.hand));\n\n    session == null ? void 0 : session.addEventListener('inputsourceschange', handleInputSourcesChange);\n    setHandTracking(Object.values((_session$inputSources = session == null ? void 0 : session.inputSources) != null ? _session$inputSources : []).some(source => source.hand));\n    return () => {\n      session == null ? void 0 : session.removeEventListener('inputsourceschange', handleInputSourcesChange);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isPresenting]);\n  const value = React.useMemo(() => ({\n    controllers,\n    isPresenting,\n    isHandTracking,\n    player\n  }), [controllers, isPresenting, isHandTracking, player]);\n  return /*#__PURE__*/React.createElement(XRContext.Provider, {\n    value: value\n  }, /*#__PURE__*/React.createElement(\"primitive\", {\n    object: player,\n    dispose: null\n  }, /*#__PURE__*/React.createElement(\"primitive\", {\n    object: camera,\n    dispose: null\n  })), children);\n}\n\nfunction XRCanvas({\n  foveation,\n  children,\n  ...rest\n}) {\n  return /*#__PURE__*/React.createElement(Canvas, _extends({\n    vr: true\n  }, rest), /*#__PURE__*/React.createElement(XR, {\n    foveation: foveation\n  }, /*#__PURE__*/React.createElement(InteractionManager, null, children)));\n}\n\nfunction useXRButton(mode, gl, sessionInit, container) {\n  const button = React.useMemo(() => {\n    const target = mode === 'AR' ? ARButton : VRButton;\n    return target.createButton(gl, sessionInit);\n  }, [mode, gl, sessionInit]);\n  React.useLayoutEffect(() => {\n    var _container$current;\n\n    const parent = (_container$current = container == null ? void 0 : container.current) != null ? _container$current : document.body;\n    parent.appendChild(button);\n    return () => void parent.removeChild(button); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [button]);\n  return button;\n}\nfunction XRButton({\n  mode,\n  sessionInit\n}) {\n  const gl = useThree(state => state.gl);\n  useXRButton(mode, gl, sessionInit);\n  return null;\n}\nfunction VRCanvas({\n  children,\n  sessionInit,\n  ...rest\n}) {\n  return /*#__PURE__*/React.createElement(XRCanvas, rest, /*#__PURE__*/React.createElement(XRButton, {\n    mode: \"VR\",\n    sessionInit: sessionInit\n  }), children);\n}\nfunction ARCanvas({\n  children,\n  sessionInit,\n  ...rest\n}) {\n  return /*#__PURE__*/React.createElement(XRCanvas, rest, /*#__PURE__*/React.createElement(XRButton, {\n    mode: \"AR\",\n    sessionInit: sessionInit\n  }), children);\n}\nconst useXR = () => {\n  const xrValue = React.useContext(XRContext);\n  const interactionsValue = React.useContext(InteractionsContext);\n  const contextValue = React.useMemo(() => ({ ...xrValue,\n    ...interactionsValue\n  }), [xrValue, interactionsValue]);\n  return contextValue;\n};\n/**\n * @deprecated R3F v8's built-in `useFrame` extends the `XRSession.requestAnimationFrame` signature:\n *\n * `useFrame((state, delta, xrFrame) => void)`\n *\n * @see https://mdn.io/XRFrame\n */\n\nconst useXRFrame = callback => {\n  const {\n    gl\n  } = useThree();\n  const requestRef = React.useRef();\n  const previousTimeRef = React.useRef();\n  const loop = React.useCallback((time, xrFrame) => {\n    if (previousTimeRef.current !== undefined) {\n      callback(time, xrFrame);\n    }\n\n    previousTimeRef.current = time;\n    requestRef.current = gl.xr.getSession().requestAnimationFrame(loop);\n  }, [gl.xr, callback]);\n  React.useEffect(() => {\n    const handleSessionChange = () => {\n      var _gl$xr;\n\n      if (!((_gl$xr = gl.xr) != null && _gl$xr.isPresenting)) return;\n\n      if (requestRef.current) {\n        gl.xr.getSession().cancelAnimationFrame(requestRef.current);\n      }\n\n      requestRef.current = gl.xr.getSession().requestAnimationFrame(loop);\n    };\n\n    handleSessionChange();\n    gl.xr.addEventListener('sessionstart', handleSessionChange);\n    gl.xr.addEventListener('sessionend', handleSessionChange);\n    return () => {\n      gl.xr.removeEventListener('sessionstart', handleSessionChange);\n      gl.xr.removeEventListener('sessionend', handleSessionChange);\n\n      if (requestRef.current) {\n        gl.xr.getSession().cancelAnimationFrame(requestRef.current);\n      }\n    };\n  }, [loop, gl.xr]);\n};\nconst useController = handedness => {\n  const {\n    controllers\n  } = useXR();\n  const controller = React.useMemo(() => controllers.find(it => it.inputSource.handedness === handedness), [handedness, controllers]);\n  return controller;\n};\n\n/**\n * @webxr-input-profiles/motion-controllers 1.0.0 https://github.com/immersive-web/webxr-input-profiles\n */\nconst MotionControllerConstants = {\n  Handedness: Object.freeze({\n    NONE: 'none',\n    LEFT: 'left',\n    RIGHT: 'right'\n  }),\n  ComponentState: Object.freeze({\n    DEFAULT: 'default',\n    TOUCHED: 'touched',\n    PRESSED: 'pressed'\n  }),\n  ComponentProperty: Object.freeze({\n    BUTTON: 'button',\n    X_AXIS: 'xAxis',\n    Y_AXIS: 'yAxis',\n    STATE: 'state'\n  }),\n  ComponentType: Object.freeze({\n    TRIGGER: 'trigger',\n    SQUEEZE: 'squeeze',\n    TOUCHPAD: 'touchpad',\n    THUMBSTICK: 'thumbstick',\n    BUTTON: 'button'\n  }),\n  ButtonTouchThreshold: 0.05,\n  AxisTouchThreshold: 0.1,\n  VisualResponseProperty: Object.freeze({\n    TRANSFORM: 'transform',\n    VISIBILITY: 'visibility'\n  })\n};\n/**\n * @description Static helper function to fetch a JSON file and turn it into a JS object\n * @param {string} path - Path to JSON file to be fetched\n */\n\nasync function fetchJsonFile(path) {\n  const response = await fetch(path);\n\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  } else {\n    return response.json();\n  }\n}\n\nasync function fetchProfilesList(basePath) {\n  if (!basePath) {\n    throw new Error('No basePath supplied');\n  }\n\n  const profileListFileName = 'profilesList.json';\n  const profilesList = await fetchJsonFile(`${basePath}/${profileListFileName}`);\n  return profilesList;\n}\n\nasync function fetchProfile(xrInputSource, basePath, defaultProfile = null, getAssetPath = true) {\n  if (!xrInputSource) {\n    throw new Error('No xrInputSource supplied');\n  }\n\n  if (!basePath) {\n    throw new Error('No basePath supplied');\n  } // Get the list of profiles\n\n\n  const supportedProfilesList = await fetchProfilesList(basePath); // Find the relative path to the first requested profile that is recognized\n\n  let match;\n  xrInputSource.profiles.some(profileId => {\n    const supportedProfile = supportedProfilesList[profileId];\n\n    if (supportedProfile) {\n      match = {\n        profileId,\n        profilePath: `${basePath}/${supportedProfile.path}`,\n        deprecated: !!supportedProfile.deprecated\n      };\n    }\n\n    return !!match;\n  });\n\n  if (!match) {\n    if (!defaultProfile) {\n      throw new Error('No matching profile name found');\n    }\n\n    const supportedProfile = supportedProfilesList[defaultProfile];\n\n    if (!supportedProfile) {\n      throw new Error(`No matching profile name found and default profile \"${defaultProfile}\" missing.`);\n    }\n\n    match = {\n      profileId: defaultProfile,\n      profilePath: `${basePath}/${supportedProfile.path}`,\n      deprecated: !!supportedProfile.deprecated\n    };\n  }\n\n  const profile = await fetchJsonFile(match.profilePath);\n  let assetPath;\n\n  if (getAssetPath) {\n    let layout;\n\n    if (xrInputSource.handedness === 'any') {\n      layout = profile.layouts[Object.keys(profile.layouts)[0]];\n    } else {\n      layout = profile.layouts[xrInputSource.handedness];\n    }\n\n    if (!layout) {\n      throw new Error(`No matching handedness, ${xrInputSource.handedness}, in profile ${match.profileId}`);\n    }\n\n    if (layout.assetPath) {\n      assetPath = match.profilePath.replace('profile.json', layout.assetPath);\n    }\n  }\n\n  return {\n    profile,\n    assetPath\n  };\n}\n/** @constant {Object} */\n\n\nconst defaultComponentValues = {\n  xAxis: 0,\n  yAxis: 0,\n  button: 0,\n  state: MotionControllerConstants.ComponentState.DEFAULT\n};\n/**\n * @description Converts an X, Y coordinate from the range -1 to 1 (as reported by the Gamepad\n * API) to the range 0 to 1 (for interpolation). Also caps the X, Y values to be bounded within\n * a circle. This ensures that thumbsticks are not animated outside the bounds of their physical\n * range of motion and touchpads do not report touch locations off their physical bounds.\n * @param {number} x The original x coordinate in the range -1 to 1\n * @param {number} y The original y coordinate in the range -1 to 1\n */\n\nfunction normalizeAxes(x = 0, y = 0) {\n  let xAxis = x;\n  let yAxis = y; // Determine if the point is outside the bounds of the circle\n  // and, if so, place it on the edge of the circle\n\n  const hypotenuse = Math.sqrt(x * x + y * y);\n\n  if (hypotenuse > 1) {\n    const theta = Math.atan2(y, x);\n    xAxis = Math.cos(theta);\n    yAxis = Math.sin(theta);\n  } // Scale and move the circle so values are in the interpolation range.  The circle's origin moves\n  // from (0, 0) to (0.5, 0.5). The circle's radius scales from 1 to be 0.5.\n\n\n  const result = {\n    normalizedXAxis: xAxis * 0.5 + 0.5,\n    normalizedYAxis: yAxis * 0.5 + 0.5\n  };\n  return result;\n}\n/**\n * Contains the description of how the 3D model should visually respond to a specific user input.\n * This is accomplished by initializing the object with the name of a node in the 3D model and\n * property that need to be modified in response to user input, the name of the nodes representing\n * the allowable range of motion, and the name of the input which triggers the change. In response\n * to the named input changing, this object computes the appropriate weighting to use for\n * interpolating between the range of motion nodes.\n */\n\n\nclass VisualResponse {\n  constructor(visualResponseDescription) {\n    this.componentProperty = visualResponseDescription.componentProperty;\n    this.states = visualResponseDescription.states;\n    this.valueNodeName = visualResponseDescription.valueNodeName;\n    this.valueNodeProperty = visualResponseDescription.valueNodeProperty;\n\n    if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n      this.minNodeName = visualResponseDescription.minNodeName;\n      this.maxNodeName = visualResponseDescription.maxNodeName;\n    } // Initializes the response's current value based on default data\n\n\n    this.value = 0;\n    this.updateFromComponent(defaultComponentValues);\n  }\n  /**\n   * Computes the visual response's interpolation weight based on component state\n   * @param {Object} componentValues - The component from which to update\n   * @param {number} xAxis - The reported X axis value of the component\n   * @param {number} yAxis - The reported Y axis value of the component\n   * @param {number} button - The reported value of the component's button\n   * @param {string} state - The component's active state\n   */\n\n\n  updateFromComponent({\n    xAxis,\n    yAxis,\n    button,\n    state\n  }) {\n    const {\n      normalizedXAxis,\n      normalizedYAxis\n    } = normalizeAxes(xAxis, yAxis);\n\n    switch (this.componentProperty) {\n      case MotionControllerConstants.ComponentProperty.X_AXIS:\n        this.value = this.states.includes(state) ? normalizedXAxis : 0.5;\n        break;\n\n      case MotionControllerConstants.ComponentProperty.Y_AXIS:\n        this.value = this.states.includes(state) ? normalizedYAxis : 0.5;\n        break;\n\n      case MotionControllerConstants.ComponentProperty.BUTTON:\n        this.value = this.states.includes(state) ? button : 0;\n        break;\n\n      case MotionControllerConstants.ComponentProperty.STATE:\n        if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n          this.value = this.states.includes(state);\n        } else {\n          this.value = this.states.includes(state) ? 1.0 : 0.0;\n        }\n\n        break;\n\n      default:\n        throw new Error(`Unexpected visualResponse componentProperty ${this.componentProperty}`);\n    }\n  }\n\n}\n\nclass Component {\n  /**\n   * @param {Object} componentId - Id of the component\n   * @param {Object} componentDescription - Description of the component to be created\n   */\n  constructor(componentId, componentDescription) {\n    if (!componentId || !componentDescription || !componentDescription.visualResponses || !componentDescription.gamepadIndices || Object.keys(componentDescription.gamepadIndices).length === 0) {\n      throw new Error('Invalid arguments supplied');\n    }\n\n    this.id = componentId;\n    this.type = componentDescription.type;\n    this.rootNodeName = componentDescription.rootNodeName;\n    this.touchPointNodeName = componentDescription.touchPointNodeName; // Build all the visual responses for this component\n\n    this.visualResponses = {};\n    Object.keys(componentDescription.visualResponses).forEach(responseName => {\n      const visualResponse = new VisualResponse(componentDescription.visualResponses[responseName]);\n      this.visualResponses[responseName] = visualResponse;\n    }); // Set default values\n\n    this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices);\n    this.values = {\n      state: MotionControllerConstants.ComponentState.DEFAULT,\n      button: this.gamepadIndices.button !== undefined ? 0 : undefined,\n      xAxis: this.gamepadIndices.xAxis !== undefined ? 0 : undefined,\n      yAxis: this.gamepadIndices.yAxis !== undefined ? 0 : undefined\n    };\n  }\n\n  get data() {\n    const data = {\n      id: this.id,\n      ...this.values\n    };\n    return data;\n  }\n  /**\n   * @description Poll for updated data based on current gamepad state\n   * @param {Object} gamepad - The gamepad object from which the component data should be polled\n   */\n\n\n  updateFromGamepad(gamepad) {\n    // Set the state to default before processing other data sources\n    this.values.state = MotionControllerConstants.ComponentState.DEFAULT; // Get and normalize button\n\n    if (this.gamepadIndices.button !== undefined && gamepad.buttons.length > this.gamepadIndices.button) {\n      const gamepadButton = gamepad.buttons[this.gamepadIndices.button];\n      this.values.button = gamepadButton.value;\n      this.values.button = this.values.button < 0 ? 0 : this.values.button;\n      this.values.button = this.values.button > 1 ? 1 : this.values.button; // Set the state based on the button\n\n      if (gamepadButton.pressed || this.values.button === 1) {\n        this.values.state = MotionControllerConstants.ComponentState.PRESSED;\n      } else if (gamepadButton.touched || this.values.button > MotionControllerConstants.ButtonTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    } // Get and normalize x axis value\n\n\n    if (this.gamepadIndices.xAxis !== undefined && gamepad.axes.length > this.gamepadIndices.xAxis) {\n      this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis];\n      this.values.xAxis = this.values.xAxis < -1 ? -1 : this.values.xAxis;\n      this.values.xAxis = this.values.xAxis > 1 ? 1 : this.values.xAxis; // If the state is still default, check if the xAxis makes it touched\n\n      if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.xAxis) > MotionControllerConstants.AxisTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    } // Get and normalize Y axis value\n\n\n    if (this.gamepadIndices.yAxis !== undefined && gamepad.axes.length > this.gamepadIndices.yAxis) {\n      this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis];\n      this.values.yAxis = this.values.yAxis < -1 ? -1 : this.values.yAxis;\n      this.values.yAxis = this.values.yAxis > 1 ? 1 : this.values.yAxis; // If the state is still default, check if the yAxis makes it touched\n\n      if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.yAxis) > MotionControllerConstants.AxisTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    } // Update the visual response weights based on the current component data\n\n\n    Object.values(this.visualResponses).forEach(visualResponse => {\n      visualResponse.updateFromComponent(this.values);\n    });\n  }\n\n}\n/**\n * @description Builds a motion controller with components and visual responses based on the\n * supplied profile description. Data is polled from the xrInputSource's gamepad.\n * @author Nell Waliczek / https://github.com/NellWaliczek\n */\n\n\nclass MotionController {\n  /**\n   * @param {Object} xrInputSource - The XRInputSource to build the MotionController around\n   * @param {Object} profile - The best matched profile description for the supplied xrInputSource\n   * @param {Object} assetUrl\n   */\n  constructor(xrInputSource, profile, assetUrl) {\n    if (!xrInputSource) {\n      throw new Error('No xrInputSource supplied');\n    }\n\n    if (!profile) {\n      throw new Error('No profile supplied');\n    }\n\n    this.xrInputSource = xrInputSource;\n    this.assetUrl = assetUrl;\n    this.id = profile.profileId; // Build child components as described in the profile description\n\n    this.layoutDescription = profile.layouts[xrInputSource.handedness];\n    this.components = {};\n    Object.keys(this.layoutDescription.components).forEach(componentId => {\n      const componentDescription = this.layoutDescription.components[componentId];\n      this.components[componentId] = new Component(componentId, componentDescription);\n    }); // Initialize components based on current gamepad state\n\n    this.updateFromGamepad();\n  }\n\n  get gripSpace() {\n    return this.xrInputSource.gripSpace;\n  }\n\n  get targetRaySpace() {\n    return this.xrInputSource.targetRaySpace;\n  }\n  /**\n   * @description Returns a subset of component data for simplified debugging\n   */\n\n\n  get data() {\n    const data = [];\n    Object.values(this.components).forEach(component => {\n      data.push(component.data);\n    });\n    return data;\n  }\n  /**\n   * @description Poll for updated data based on current gamepad state\n   */\n\n\n  updateFromGamepad() {\n    Object.values(this.components).forEach(component => {\n      component.updateFromGamepad(this.xrInputSource.gamepad);\n    });\n  }\n\n}\n\nconst DEFAULT_PROFILES_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles';\nconst DEFAULT_PROFILE = 'generic-trigger';\n\nclass XRControllerModel extends Object3D {\n  constructor() {\n    super();\n    this.motionController = null;\n    this.envMap = null;\n  }\n\n  setEnvironmentMap(envMap) {\n    if (this.envMap == envMap) {\n      return this;\n    }\n\n    this.envMap = envMap;\n    this.traverse(child => {\n      if (child.isMesh) {\n        child.material.envMap = this.envMap;\n        child.material.needsUpdate = true;\n      }\n    });\n    return this;\n  }\n  /**\n   * Polls data from the XRInputSource and updates the model's components to match\n   * the real world data\n   */\n\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (!this.motionController) return; // Cause the MotionController to poll the Gamepad for data\n\n    this.motionController.updateFromGamepad(); // Update the 3D model to reflect the button, thumbstick, and touchpad state\n\n    Object.values(this.motionController.components).forEach(component => {\n      // Update node data based on the visual responses' current states\n      Object.values(component.visualResponses).forEach(visualResponse => {\n        const {\n          valueNode,\n          minNode,\n          maxNode,\n          value,\n          valueNodeProperty\n        } = visualResponse; // Skip if the visual response node is not found. No error is needed,\n        // because it will have been reported at load time.\n\n        if (!valueNode) return; // Calculate the new properties based on the weight supplied\n\n        if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n          valueNode.visible = value;\n        } else if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n          valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value);\n          valueNode.position.lerpVectors(minNode.position, maxNode.position, value);\n        }\n      });\n    });\n  }\n\n}\n/**\n * Walks the model's tree to find the nodes needed to animate the components and\n * saves them to the motionContoller components for use in the frame loop. When\n * touchpads are found, attaches a touch dot to them.\n */\n\n\nfunction findNodes(motionController, scene) {\n  // Loop through the components and find the nodes needed for each components' visual responses\n  Object.values(motionController.components).forEach(component => {\n    const {\n      type,\n      touchPointNodeName,\n      visualResponses\n    } = component;\n\n    if (type === MotionControllerConstants.ComponentType.TOUCHPAD) {\n      component.touchPointNode = scene.getObjectByName(touchPointNodeName);\n\n      if (component.touchPointNode) {\n        // Attach a touch dot to the touchpad.\n        const sphereGeometry = new SphereGeometry(0.001);\n        const material = new MeshBasicMaterial({\n          color: 0x0000ff\n        });\n        const sphere = new Mesh(sphereGeometry, material);\n        component.touchPointNode.add(sphere);\n      } else {\n        console.warn(`Could not find touch dot, ${component.touchPointNodeName}, in touchpad component ${component.id}`);\n      }\n    } // Loop through all the visual responses to be applied to this component\n\n\n    Object.values(visualResponses).forEach(visualResponse => {\n      const {\n        valueNodeName,\n        minNodeName,\n        maxNodeName,\n        valueNodeProperty\n      } = visualResponse; // If animating a transform, find the two nodes to be interpolated between.\n\n      if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n        visualResponse.minNode = scene.getObjectByName(minNodeName);\n        visualResponse.maxNode = scene.getObjectByName(maxNodeName); // If the extents cannot be found, skip this animation\n\n        if (!visualResponse.minNode) {\n          console.warn(`Could not find ${minNodeName} in the model`);\n          return;\n        }\n\n        if (!visualResponse.maxNode) {\n          console.warn(`Could not find ${maxNodeName} in the model`);\n          return;\n        }\n      } // If the target node cannot be found, skip this animation\n\n\n      visualResponse.valueNode = scene.getObjectByName(valueNodeName);\n\n      if (!visualResponse.valueNode) {\n        console.warn(`Could not find ${valueNodeName} in the model`);\n      }\n    });\n  });\n}\n\nfunction addAssetSceneToControllerModel(controllerModel, scene) {\n  // Find the nodes needed for animation and cache them on the motionController.\n  findNodes(controllerModel.motionController, scene); // Apply any environment map that the mesh already has set.\n\n  if (controllerModel.envMap) {\n    scene.traverse(child => {\n      if (child.isMesh) {\n        child.material.envMap = controllerModel.envMap;\n        child.material.needsUpdate = true;\n      }\n    });\n  } // Add the glTF scene to the controllerModel.\n\n\n  controllerModel.add(scene);\n}\n\nclass XRControllerModelFactory {\n  constructor(gltfLoader = null) {\n    this.gltfLoader = gltfLoader;\n    this.path = DEFAULT_PROFILES_PATH;\n    this._assetCache = {}; // If a GLTFLoader wasn't supplied to the constructor create a new one.\n\n    if (!this.gltfLoader) {\n      this.gltfLoader = new GLTFLoader();\n    }\n  }\n\n  createControllerModel(controller) {\n    const controllerModel = new XRControllerModel();\n    let scene = null;\n    controller.addEventListener('connected', event => {\n      const xrInputSource = event.data;\n      if (xrInputSource.targetRayMode !== 'tracked-pointer' || !xrInputSource.gamepad) return;\n      fetchProfile(xrInputSource, this.path, DEFAULT_PROFILE).then(({\n        profile,\n        assetPath\n      }) => {\n        controllerModel.motionController = new MotionController(xrInputSource, profile, assetPath);\n        const cachedAsset = this._assetCache[controllerModel.motionController.assetUrl];\n\n        if (cachedAsset) {\n          scene = cachedAsset.scene.clone();\n          addAssetSceneToControllerModel(controllerModel, scene);\n        } else {\n          if (!this.gltfLoader) {\n            throw new Error('GLTFLoader not set.');\n          }\n\n          this.gltfLoader.setPath('');\n          this.gltfLoader.load(controllerModel.motionController.assetUrl, asset => {\n            this._assetCache[controllerModel.motionController.assetUrl] = asset;\n            scene = asset.scene.clone();\n            addAssetSceneToControllerModel(controllerModel, scene);\n          }, null, () => {\n            throw new Error(`Asset ${controllerModel.motionController.assetUrl} missing or malformed.`);\n          });\n        }\n      }).catch(err => {\n        console.warn(err);\n      });\n    });\n    controller.addEventListener('disconnected', () => {\n      controllerModel.motionController = null;\n      controllerModel.remove(scene);\n      scene = null;\n    });\n    return controllerModel;\n  }\n\n}\n\nconst modelFactory = new XRControllerModelFactory();\nconst modelCache = new WeakMap();\nfunction DefaultXRControllers({\n  rayMaterial = {}\n}) {\n  const {\n    scene\n  } = useThree();\n  const {\n    controllers,\n    hoverState\n  } = useXR();\n  const [rays] = React__default.useState(new Map()); // Show ray line when hovering objects\n\n  useFrame(() => {\n    controllers.forEach(it => {\n      const ray = rays.get(it.controller.id);\n      if (!ray) return;\n      const intersection = hoverState[it.inputSource.handedness].values().next().value;\n\n      if (!intersection || it.inputSource.handedness === 'none') {\n        ray.visible = false;\n        return;\n      }\n\n      const rayLength = intersection.distance; // Tiny offset to clip ray on AR devices\n      // that don't have handedness set to 'none'\n\n      const offset = -0.01;\n      ray.visible = true;\n      ray.scale.y = rayLength + offset;\n      ray.position.z = -rayLength / 2 - offset;\n    });\n  });\n  useEffect(() => {\n    const cleanups = [];\n    controllers.forEach(({\n      controller,\n      grip,\n      inputSource\n    }) => {\n      // Attach 3D model of the controller\n      let model;\n\n      if (modelCache.has(controller)) {\n        model = modelCache.get(controller);\n      } else {\n        model = modelFactory.createControllerModel(controller);\n        controller.dispatchEvent({\n          type: 'connected',\n          data: inputSource,\n          fake: true\n        });\n        modelCache.set(controller, model);\n      }\n\n      grip.add(model); // Add Ray line (used for hovering)\n\n      const ray = new Mesh();\n      ray.rotation.set(Math.PI / 2, 0, 0);\n      ray.material = new MeshBasicMaterial({\n        color: new Color(0xffffff),\n        opacity: 0.8,\n        transparent: true,\n        ...rayMaterial\n      });\n      ray.geometry = new BoxBufferGeometry(0.002, 1, 0.002);\n      rays.set(controller.id, ray);\n      controller.add(ray);\n      cleanups.push(() => {\n        grip.remove(model);\n        controller.remove(ray);\n        rays.delete(controller.id);\n      });\n    });\n    return () => {\n      cleanups.forEach(fn => fn());\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [controllers, scene, rays, JSON.stringify(rayMaterial)]);\n  return null;\n}\n\nconst DEFAULT_HAND_PROFILE_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles/generic-hand/';\n\nclass XRHandMeshModel {\n  constructor(handModel, controller, path, handedness, customModel) {\n    this.controller = controller;\n    this.handModel = handModel;\n    this.bones = [];\n    const loader = new GLTFLoader();\n    if (!customModel) loader.setPath(path || DEFAULT_HAND_PROFILE_PATH);\n    loader.load(customModel != null ? customModel : `${handedness}.glb`, gltf => {\n      const object = gltf.scene.children[0];\n      this.handModel.add(object);\n      const mesh = object.getObjectByProperty('type', 'SkinnedMesh');\n      mesh.frustumCulled = false;\n      mesh.castShadow = true;\n      mesh.receiveShadow = true;\n      mesh.material.side = 0; // Workaround: force FrontSide\n\n      const joints = ['wrist', 'thumb-metacarpal', 'thumb-phalanx-proximal', 'thumb-phalanx-distal', 'thumb-tip', 'index-finger-metacarpal', 'index-finger-phalanx-proximal', 'index-finger-phalanx-intermediate', 'index-finger-phalanx-distal', 'index-finger-tip', 'middle-finger-metacarpal', 'middle-finger-phalanx-proximal', 'middle-finger-phalanx-intermediate', 'middle-finger-phalanx-distal', 'middle-finger-tip', 'ring-finger-metacarpal', 'ring-finger-phalanx-proximal', 'ring-finger-phalanx-intermediate', 'ring-finger-phalanx-distal', 'ring-finger-tip', 'pinky-finger-metacarpal', 'pinky-finger-phalanx-proximal', 'pinky-finger-phalanx-intermediate', 'pinky-finger-phalanx-distal', 'pinky-finger-tip'];\n      joints.forEach(jointName => {\n        const bone = object.getObjectByName(jointName);\n\n        if (bone !== undefined) {\n          bone.jointName = jointName;\n        } else {\n          console.warn(`Couldn't find ${jointName} in ${handedness} hand mesh`);\n        }\n\n        this.bones.push(bone);\n      });\n    });\n  }\n\n  updateMesh() {\n    // XR Joints\n    const XRJoints = this.controller.joints;\n\n    for (let i = 0; i < this.bones.length; i++) {\n      const bone = this.bones[i];\n\n      if (bone) {\n        const XRJoint = XRJoints[bone.jointName];\n\n        if (XRJoint.visible) {\n          const position = XRJoint.position;\n\n          if (bone) {\n            bone.position.copy(position);\n            bone.quaternion.copy(XRJoint.quaternion); // bone.scale.setScalar( XRJoint.jointRadius || defaultRadius );\n          }\n        }\n      }\n    }\n  }\n\n  dispose() {\n    this.handModel.traverse(node => {\n      if (!node) return;\n\n      if (node.type !== 'Scene') {\n        node.dispose == null ? void 0 : node.dispose(); // Dispose of its properties as well\n\n        for (const property in node) {\n          if (property.dispose) property.dispose == null ? void 0 : property.dispose();\n          delete node[property];\n        }\n      }\n    });\n    this.bones = [];\n  }\n\n}\n\nconst TOUCH_RADIUS = 0.01;\nconst POINTING_JOINT = 'index-finger-tip';\n\nclass HandModel extends Object3D {\n  constructor(controller, customModels) {\n    super();\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n    controller.addEventListener('connected', event => {\n      const xrInputSource = event.data;\n\n      if (xrInputSource.hand && !this.motionController) {\n        this.xrInputSource = xrInputSource;\n        this.motionController = new XRHandMeshModel(this, controller, this.path, xrInputSource.handedness, xrInputSource.handedness === 'left' ? customModels[0] : customModels[1]);\n      }\n    });\n    controller.addEventListener('disconnected', () => {\n      this.dispose();\n    });\n  }\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n\n  getPointerPosition() {\n    const indexFingerTip = this.controller.joints[POINTING_JOINT];\n\n    if (indexFingerTip) {\n      return indexFingerTip.position;\n    } else {\n      return null;\n    }\n  }\n\n  intersectBoxObject(boxObject) {\n    const pointerPosition = this.getPointerPosition();\n\n    if (pointerPosition) {\n      const indexSphere = new Sphere(pointerPosition, TOUCH_RADIUS);\n      const box = new Box3().setFromObject(boxObject);\n      return indexSphere.intersectsBox(box);\n    } else {\n      return false;\n    }\n  }\n\n  checkButton(button) {\n    if (this.intersectBoxObject(button)) {\n      button.onPress();\n    } else {\n      button.onClear();\n    }\n\n    if (button.isPressed()) {\n      button.whilePressed();\n    }\n  }\n\n  dispose() {\n    var _this$motionControlle, _this$motionControlle2;\n\n    this.clear();\n    if (this.motionController) (_this$motionControlle = (_this$motionControlle2 = this.motionController).dispose) == null ? void 0 : _this$motionControlle.call(_this$motionControlle2);\n    this.motionController = null;\n  }\n\n}\n\nfunction Hands(props) {\n  const {\n    scene,\n    gl\n  } = useThree();\n  const {\n    controllers\n  } = useXR();\n  useEffect(() => {\n    controllers.forEach(({\n      hand,\n      inputSource\n    }) => {\n      const handModel = hand.children.find(child => child instanceof HandModel);\n\n      if (handModel) {\n        hand.remove(handModel);\n        handModel.dispose();\n      }\n\n      hand.add(new HandModel(hand, [props.modelLeft, props.modelRight])); // throwing fake event for the Oculus Hand Model so it starts loading\n\n      hand.dispatchEvent({\n        type: 'connected',\n        data: inputSource,\n        fake: true\n      });\n    });\n    return () => {\n      controllers.forEach(({\n        hand\n      }) => {\n        const handModel = hand.children.find(child => child instanceof HandModel);\n\n        if (handModel) {\n          hand.remove(handModel);\n          handModel.dispose();\n        }\n      });\n    };\n  }, [scene, gl, controllers, props.modelLeft, props.modelRight]);\n  return null;\n}\n\nexport { ARCanvas, DefaultXRControllers, Hands, InteractionManager, InteractionsContext, Interactive, RayGrab, VRCanvas, XR, XRButton, XRController, useController, useHitTest, useInteraction, useXR, useXRButton, useXREvent, useXRFrame };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}